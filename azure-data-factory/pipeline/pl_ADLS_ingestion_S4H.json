{
	"name": "pl_ADLS_ingestion_S4H",
	"properties": {
		"activities": [
			{
				"name": "Run XU Extraction",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Set extraction url",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "GET",
					"url": {
						"value": "@variables('extraction_url')",
						"type": "Expression"
					},
					"connectVia": {
						"referenceName": "ir-WEXLEVAPP001",
						"type": "IntegrationRuntimeReference"
					}
				}
			},
			{
				"name": "Set Timestamp Variable",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Run XU Extraction",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "XUExtractionTimestamp",
					"value": {
						"value": "@activity('Run XU Extraction').output.ADFWebActivityResponseHeaders.X-XU-Timestamp",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Update Extract Batch Failed",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Run XU Extraction",
						"dependencyConditions": [
							"Failed"
						]
					},
					{
						"activity": "Lookup Extraction Destination",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"size_bytes": {
							"value": null,
							"type": "Int64"
						},
						"status": {
							"value": "Failed",
							"type": "String"
						},
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Exception",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Update Extract Batch Failed",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[log_exception]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"category": {
							"value": "FailedStartXUExtraction",
							"type": "String"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"error_msg": {
							"value": {
								"value": "@activity('Run XU Extraction').Error.Message",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Store Timestamp and File Name",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set ADLS File Name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"file_name": {
							"value": {
								"value": "@variables('adlsFileName')",
								"type": "Expression"
							},
							"type": "String"
						},
						"directory_path": {
							"value": {
								"value": "@variables('directory_path')",
								"type": "Expression"
							},
							"type": "String"
						},
						"status": {
							"value": null,
							"type": "String"
						},
						"output": {
							"value": {
								"value": "@concat(\n    '{\"timestamp\":\"',\n    variables('XUExtractionTimestamp'),\n    '\",\"extraction_timestamp\":\"',\n    concat(\n        substring(variables('XUExtractionTimestamp'), 0, 10),\n        ' ',\n        substring(variables('XUExtractionTimestamp'), 11, 12)\n    ),\n    '\"}'\n)",
								"type": "Expression"
							},
							"type": "String"
						},
						"end_date_time": {
							"value": null
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Set ADLS File Name",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set Timestamp Variable",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "If maxBlobSize gt 0",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "adlsFileName",
					"value": {
						"value": "@concat(\n    pipeline().parameters.extraction_name,\n    '_',\n    replace(replace(replace(variables('XUExtractionTimestamp'),'-','_'),':','_'),'.','_'),\n    variables('adlsFileNameSuffix')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Fail to start XU Extraction",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Log Exception",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat(\n    'Failed to start XU Extraction: ',\n    activity('Run XU Extraction').Error.Message\n)",
						"type": "Expression"
					},
					"errorCode": "500"
				}
			},
			{
				"name": "Add subscription suffix if ODP",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set url params",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(\r\n    pipeline().parameters.extraction_type,\r\n    'ODP'\r\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Add Subscription Suffix Url Param",
							"type": "AppendVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "urlParams",
								"value": {
									"value": "@concat(\r\n    'subscriptionSuffix=',\r\n    pipeline().globalParameters.environment\r\n)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Set extraction url",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Add subscription suffix if ODP",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "extraction_url",
					"value": {
						"value": "@concat(\n\tpipeline().globalParameters.XU_hostName\n\t,'/?'\n\t,join(variables('urlParams'), '&')\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set source url param",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "sourceUrlParam",
					"value": {
						"value": "@concat(\n    'source=CRH_Leviat_S4HANA_'\n    ,pipeline().globalParameters.s4hSystemId\n    ,'_'\n    ,string(pipeline().globalParameters.s4hClientId)\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set destination url param",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "destinationUrlParam",
					"value": {
						"value": "@concat(\n    'destination='\n    ,pipeline().globalParameters.storageAccountName\n    ,'_s4h-'\n    ,pipeline().globalParameters.s4hSystemId\n    ,'-'\n    ,string(pipeline().globalParameters.s4hClientId)\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set url params",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Set source url param",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set destination url param",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "urlParams",
					"value": {
						"value": "@createArray(\n    concat(\n        'name='\n        ,pipeline().globalParameters.environment\n        ,'_'\n        ,pipeline().parameters.extraction_name\n    ),\n    variables('sourceUrlParam'),\n    variables('destinationUrlParam'),\n    'wait=false'\n)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "If maxBlobSize gt 0",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Lookup Extraction Destination",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set directory_path",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@greater(\r\n    activity('Lookup Extraction Destination').output.firstRow.maxBlobSize\r\n    , 0\r\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Set adlsFileNameSuffix Wildcard",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "adlsFileNameSuffix",
								"value": "*.parquet"
							}
						}
					]
				}
			},
			{
				"name": "Lookup Extraction Destination",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set extraction url",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobFSReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "JsonReadSettings"
						}
					},
					"dataset": {
						"referenceName": "ds_xu_extraction_destination",
						"type": "DatasetReference",
						"parameters": {
							"storageAccount": {
								"value": "@pipeline().globalParameters.storageAccountName",
								"type": "Expression"
							},
							"extractionName": {
								"value": "@pipeline().parameters.extraction_name",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Set directory_path",
				"type": "SetVariable",
				"dependsOn": [],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "directory_path",
					"value": {
						"value": "@concat(\n    substring(\n        pipeline().parameters.adls_directory_path,\n        0,\n        sub(length(pipeline().parameters.adls_directory_path), 10)\n    )\n    ,pipeline().parameters.date\n)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"extraction_name": {
				"type": "string",
				"defaultValue": "I_SalesOrderItemPricingElement_split"
			},
			"date": {
				"type": "string",
				"defaultValue": "2023/03/21"
			},
			"run_id": {
				"type": "string",
				"defaultValue": "2811baf8-9617-4e2b-849d-f74c2cfdf9f9"
			},
			"entity_id": {
				"type": "int",
				"defaultValue": 900
			},
			"adls_directory_path": {
				"type": "string",
				"defaultValue": "NULL/I_SalesOrderItemPricingElement_split/Theobald/Table/Full/In/2023/03/21"
			},
			"batch_id": {
				"type": "string"
			},
			"extraction_type": {
				"type": "string",
				"defaultValue": "Table"
			}
		},
		"variables": {
			"XUExtractionTimestamp": {
				"type": "String"
			},
			"run_id": {
				"type": "String"
			},
			"extraction_url": {
				"type": "String"
			},
			"urlParams": {
				"type": "Array"
			},
			"sourceUrlParam": {
				"type": "String"
			},
			"destinationUrlParam": {
				"type": "String"
			},
			"adlsFileName": {
				"type": "String"
			},
			"adlsFileNameSuffix": {
				"type": "String",
				"defaultValue": ".parquet"
			},
			"directory_path": {
				"type": "String"
			}
		},
		"folder": {
			"name": "00 ELT/01 ADLS Ingestion/S4H"
		},
		"annotations": [],
		"lastPublishTime": "2021-10-25T15:25:00Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}