{
	"name": "pl_GetXUExtractionStatus",
	"properties": {
		"activities": [
			{
				"name": "Update Batch Status Succesful",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Until Extraction is Finished",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id_CheckXUExtractionStatus",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"size_bytes": {
							"value": null,
							"type": "Int64"
						},
						"status": {
							"value": "Succeeded",
							"type": "String"
						},
						"output": {
							"value": {
								"value": "@concat(\n    '{\"status\":\"',\n    activity('Get XU Extraction Status').output.response,\n    '\"}'\n)",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Set Batch",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[set_batch]",
					"storedProcedureParameters": {
						"activity": {
							"value": "CheckXUExtractionStatus",
							"type": "String"
						},
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id_CheckXUExtractionStatus",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"directory_path": {
							"value": {
								"value": "@pipeline().parameters.adls_directory_path",
								"type": "Expression"
							},
							"type": "String"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"file_name": {
							"value": {
								"value": "@pipeline().parameters.adls_file_name",
								"type": "Expression"
							},
							"type": "String"
						},
						"file_path": {
							"value": null,
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"size_bytes": {
							"value": null,
							"type": "Int64"
						},
						"source_layer": {
							"value": null,
							"type": "String"
						},
						"start_date_time": {
							"value": {
								"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"status": {
							"value": "InProgress",
							"type": "String"
						},
						"target_layer": {
							"value": null,
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "If XU extraction status is FinishedNoErrors",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Update Batch Status Succesful",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@equals(variables('extraction_status'),'FinishedNoErrors')",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Update Batch Status Failed 2",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Log Exception 2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@pipeline().parameters.batch_id_Extract",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Failed",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Exception 2",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[log_exception]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@pipeline().parameters.batch_id_CheckXUExtractionStatus",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"category": {
										"value": "InternalError",
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"error_msg": {
										"value": {
											"value": "Extraction failed, check the logs",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Failed Extraction",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Update Batch Status Failed 2",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@concat(\n    'Extraction FinishedWithErrors:',\n    pipeline().parameters.extraction_name\n)",
									"type": "Expression"
								},
								"errorCode": "500"
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Update Extract Batch Status",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@pipeline().parameters.batch_id_Extract",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Succeeded",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If Timestamp Parameter Empty",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "Set Batch",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.extraction_timestamp)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set Timestamp from Param",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_timestamp",
								"value": {
									"value": "@pipeline().parameters.extraction_timestamp",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Lookup Timestamp",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT output\nFROM batch\nWHERE batch_id = '@{pipeline().parameters.batch_id_Extract}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_orch_db",
									"type": "DatasetReference",
									"parameters": {
										"sqlDb": {
											"value": "@pipeline().globalParameters.sqlDb",
											"type": "Expression"
										}
									}
								}
							}
						},
						{
							"name": "Set Timestamp",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Lookup Timestamp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_timestamp",
								"value": {
									"value": "@activity('Lookup Timestamp').output.firstRow.timestamp",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "Until Extraction is Finished",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "If Timestamp Parameter Empty",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@not(equals('Running', variables('extraction_status')))",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Get XU Extraction Status",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Wait 30seconds",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 10,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat(\n\tpipeline().globalParameters.XU_hostName\n\t,'/status/?name='\n\t,pipeline().globalParameters.environment\n\t,'_'\n\t,pipeline().parameters.extraction_name\n\t,'&source='\n\t,'CRH_Leviat_S4HANA_'\n\t,pipeline().globalParameters.s4hSystemId\n\t,'_'\n\t,string(pipeline().globalParameters.s4hClientId)\n\t,'&destination='\n\t,pipeline().globalParameters.storageAccountName\n\t,'_s4h-'\n\t,pipeline().globalParameters.s4hSystemId\n\t,'-'\n\t,string(pipeline().globalParameters.s4hClientId)\n\t,'&timestamp='\n\t,variables('extraction_timestamp')\n)",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "ir-WEXLEVAPP001",
									"type": "IntegrationRuntimeReference"
								},
								"method": "GET"
							}
						},
						{
							"name": "Wait 30seconds",
							"type": "Wait",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"waitTimeInSeconds": 30
							}
						},
						{
							"name": "Set Extraction Status",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get XU Extraction Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_status",
								"value": {
									"value": "@activity('Get XU Extraction Status').output.response",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Update Batch Status Failed",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Log Exception",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@pipeline().parameters.batch_id_CheckXUExtractionStatus",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Failed",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Exception",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get XU Extraction Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[log_exception]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@pipeline().parameters.batch_id_CheckXUExtractionStatus",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"category": {
										"value": "InternalError",
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"error_msg": {
										"value": {
											"value": "@activity('Get XU Extraction Status').Error.Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Fail Getting XU Extraction Status",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Update Batch Status Failed",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "@concat(\n    'Failed getting XU Extraction Status: ',\n    activity('Get XU Extraction Status').Error.Message\n)",
									"type": "Expression"
								},
								"errorCode": "500"
							}
						},
						{
							"name": "If no run for extraction",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Get XU Extraction Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@startswith(\n    activity('Get XU Extraction Status').output.response,\n    'No run for extraction'\n)",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "Set extraction status to No run for extraction",
										"type": "SetVariable",
										"dependsOn": [],
										"policy": {
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"variableName": "extraction_status",
											"value": {
												"value": "'No run for extraction'",
												"type": "Expression"
											}
										}
									}
								]
							}
						}
					],
					"timeout": "7.00:00:00"
				}
			}
		],
		"parameters": {
			"extraction_name": {
				"type": "string"
			},
			"date": {
				"type": "string"
			},
			"run_id": {
				"type": "string"
			},
			"entity_id": {
				"type": "int"
			},
			"extraction_timestamp": {
				"type": "string"
			},
			"batch_id_CheckXUExtractionStatus": {
				"type": "string"
			},
			"batch_id_Extract": {
				"type": "string"
			},
			"adls_directory_path": {
				"type": "string"
			},
			"adls_file_name": {
				"type": "string"
			}
		},
		"variables": {
			"extraction_timestamp": {
				"type": "String"
			},
			"extraction_status": {
				"type": "String",
				"defaultValue": "Running"
			},
			"extraction_log": {
				"type": "String"
			},
			"adlsFileName": {
				"type": "String"
			},
			"batch_status": {
				"type": "String"
			}
		},
		"folder": {
			"name": "00 ELT/01 ADLS Ingestion/S4H"
		},
		"annotations": [],
		"lastPublishTime": "2021-10-25T15:25:00Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}