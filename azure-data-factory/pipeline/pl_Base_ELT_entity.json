{
	"name": "pl_Base_ELT_entity",
	"properties": {
		"activities": [
			{
				"name": "If Test for Duplicates",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Store Extraction Logs",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'TestDuplicates'\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Test for Duplicates",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_ADLS_In_duplicatesTest",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"primary_key_columns": {
										"value": "@pipeline().parameters.pk_field_names",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@pipeline().parameters.entity_id",
										"type": "Expression"
									},
									"adls_directory_path": {
										"value": "@pipeline().parameters.adls_directory_path_In",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().parameters.run_id",
										"type": "Expression"
									},
									"source_layer": "In",
									"adls_container_name": {
										"value": "@pipeline().parameters.adls_container_name",
										"type": "Expression"
									},
									"file_name": {
										"value": "@variables('adlsFileName')",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If Extract Required",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If FileName Param Empty",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'Extract'\n)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set Extract Batch ID from Param",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "batch_id_Extract",
								"value": {
									"value": "@pipeline().parameters.skipped_activities.Extract.batch_id",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set S4H Extraction Timestamp",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_Timestamp",
								"value": {
									"value": "@pipeline().parameters.skipped_activities.Extract.output.timestamp",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Execute Entity ADLS Ingestion",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_ADLS_ingestion",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"entity_name": {
										"value": "@pipeline().parameters.entity_name",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@pipeline().parameters.entity_id",
										"type": "Expression"
									},
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().parameters.run_id",
										"type": "Expression"
									},
									"layer_nk": {
										"value": "@pipeline().parameters.layer_nk",
										"type": "Expression"
									},
									"source_database_name": {
										"value": "@pipeline().parameters.source_database_name",
										"type": "Expression"
									},
									"source_schema_name": {
										"value": "@pipeline().parameters.source_schema_name",
										"type": "Expression"
									},
									"source_table_name": {
										"value": "@pipeline().parameters.source_table_name",
										"type": "Expression"
									},
									"source_date_field_name": {
										"value": "@pipeline().parameters.source_date_field_name",
										"type": "Expression"
									},
									"adls_container_name": {
										"value": "@pipeline().parameters.adls_container_name",
										"type": "Expression"
									},
									"adls_directory_path_In": {
										"value": "@pipeline().parameters.adls_directory_path_In",
										"type": "Expression"
									},
									"adls_file_name": {
										"value": "@variables('adlsFileName')",
										"type": "Expression"
									},
									"required_activities": {
										"value": "@pipeline().parameters.required_activities",
										"type": "Expression"
									},
									"skipped_activities": {
										"value": "@pipeline().parameters.skipped_activities",
										"type": "Expression"
									},
									"batch_id": {
										"value": "@variables('batch_id_Extract')",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Reset ADLS File Name",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Lookup ADLS File Name And Output",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "adlsFileName",
								"value": {
									"value": "@activity('Lookup ADLS File Name And Output').output.firstRow.file_name",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Lookup ADLS File Name And Output",
							"description": "For S4H entities we need to retrieve adls file name from logging.",
							"type": "Lookup",
							"dependsOn": [
								{
									"activity": "Execute Entity ADLS Ingestion",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT file_name, output\nFROM [dbo].[batch]\nWHERE batch_id = '@{variables('batch_id_Extract')}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_orch_db",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Set Output",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Lookup ADLS File Name And Output",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_Output",
								"value": {
									"value": "@activity('Lookup ADLS File Name And Output').output.firstRow.output",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If Processing Source File Required",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Test for Duplicates",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'ProcessADLS'\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Process Source File",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_ADLS_process",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"entity_name": {
										"value": "@pipeline().parameters.entity_name",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@pipeline().parameters.entity_id",
										"type": "Expression"
									},
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().parameters.run_id",
										"type": "Expression"
									},
									"client_field": {
										"value": "@pipeline().parameters.client_field",
										"type": "Expression"
									},
									"extraction_type": {
										"value": "@pipeline().parameters.extraction_type",
										"type": "Expression"
									},
									"adls_container_name": {
										"value": "@pipeline().parameters.adls_container_name",
										"type": "Expression"
									},
									"adls_directory_path_In": {
										"value": "@pipeline().parameters.adls_directory_path_In",
										"type": "Expression"
									},
									"adls_directory_path_Out": {
										"value": "@pipeline().parameters.adls_directory_path_Out",
										"type": "Expression"
									},
									"adls_file_name": {
										"value": "@variables('adlsFileName')",
										"type": "Expression"
									},
									"layer_nk": {
										"value": "@pipeline().parameters.layer_nk",
										"type": "Expression"
									},
									"application_id": {
										"value": "@pipeline().parameters.source_database_name",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If Synapse Ingestion Required",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Processing Source File Required",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'Load2Base'\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Ingest Parquet into Synapse Base",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_ADLS_SYNDW_ingestion",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"base_schema_name": {
										"value": "@pipeline().parameters.base_schema_name",
										"type": "Expression"
									},
									"base_table_name": {
										"value": "@pipeline().parameters.base_table_name",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@pipeline().parameters.entity_id",
										"type": "Expression"
									},
									"directory_path": {
										"value": "@pipeline().parameters.adls_directory_path_Out",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().parameters.run_id",
										"type": "Expression"
									},
									"source_layer": "Out",
									"file_name": {
										"value": "@variables('adlsFileName')",
										"type": "Expression"
									},
									"adls_container_name": {
										"value": "@pipeline().parameters.adls_container_name",
										"type": "Expression"
									},
									"target_layer": "Base"
								}
							}
						}
					]
				}
			},
			{
				"name": "If FileName Param Empty",
				"type": "IfCondition",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(pipeline().parameters.file_name)",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "Set ADLS FileName from Param",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "adlsFileName",
								"value": {
									"value": "@pipeline().parameters.file_name",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set Generated ADLS File Name",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "adlsFileName",
								"value": {
									"value": "@concat(\n    pipeline().parameters.base_table_name\n    ,'_'\n    ,formatDateTime(utcNow(),'yyyy_MM_dd_HH_mm_ss_fff')\n    ,'.parquet'\n)",
									"type": "Expression"
								}
							}
						}
					]
				}
			},
			{
				"name": "If Get Extraction Status",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If S4H Extraction Timestamp Empty",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'CheckXUExtractionStatus'\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Execute Get Extraction Status",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_GetXUExtractionStatus",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"extraction_name": {
										"value": "@pipeline().parameters.entity_name",
										"type": "Expression"
									},
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().parameters.run_id",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@pipeline().parameters.entity_id",
										"type": "Expression"
									},
									"extraction_timestamp": {
										"value": "@variables('extraction_Timestamp')",
										"type": "Expression"
									},
									"batch_id_CheckXUExtractionStatus": {
										"value": "@guid()",
										"type": "Expression"
									},
									"batch_id_RunXUExtraction": {
										"value": "@variables('batch_id_Extract')",
										"type": "Expression"
									},
									"adls_directory_path": {
										"value": "@pipeline().parameters.adls_directory_path_In",
										"type": "Expression"
									},
									"adls_file_name": {
										"value": "@variables('adlsFileName')",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "If Store Extraction Logs",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Get Extraction Status",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@contains(\n    pipeline().parameters.required_activities,\n    'StoreXUExtractionLog'\n)",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Get Extraction Logs",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Set Store XU Extraction Logs Batch",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 10,
								"retryIntervalInSeconds": 60,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"url": {
									"value": "@concat(\n\tpipeline().globalParameters.XU_hostName\n\t,'/log/?req_type=extraction&name='\n\t,pipeline().parameters.entity_name\n\t,'&source='\n\t,pipeline().globalParameters.XU_sourceName\n\t,'&destination='\n\t,pipeline().globalParameters.storageAccountName,'_',pipeline().globalParameters.S4H_systemID\n\t,'&timestamp='\n\t,variables('extraction_Timestamp')\n)",
									"type": "Expression"
								},
								"connectVia": {
									"referenceName": "ir-WEXLEVAPP001",
									"type": "IntegrationRuntimeReference"
								},
								"method": "GET"
							}
						},
						{
							"name": "Copy Extraction Logs To ADLS",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "Get Extraction Logs",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "DelimitedTextSource",
									"additionalColumns": [
										{
											"name": "OutputText",
											"value": {
												"value": "@activity('Get Extraction Logs').output.response",
												"type": "Expression"
											}
										}
									],
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "DelimitedTextReadSettings"
									}
								},
								"sink": {
									"type": "DelimitedTextSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "DelimitedTextWriteSettings",
										"quoteAllText": true,
										"fileExtension": ".csv"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"mappings": [
										{
											"source": {
												"name": "OutputText",
												"type": "String"
											},
											"sink": {
												"type": "String",
												"physicalType": "String",
												"ordinal": 1
											}
										}
									],
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "ds_adls_csv_file_first_row_header_disabled",
									"type": "DatasetReference",
									"parameters": {
										"container": "adf-jobs",
										"directory": "Xtract Universal",
										"file": "empty_csv_source.csv"
									}
								}
							],
							"outputs": [
								{
									"referenceName": "ds_adls_csv_file_first_row_header_disabled",
									"type": "DatasetReference",
									"parameters": {
										"container": "adf-jobs",
										"directory": {
											"value": "@concat(\n    'Xtract Universal/',\n    pipeline().parameters.entity_name, \n    '/',\n    formatDateTime(pipeline().parameters.date, 'yyyy/MM/dd')\n)",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(\n    pipeline().parameters.entity_name,\n    '_extraction_log_',\n    replace(replace(replace(variables('extraction_Timestamp'),'-','_'),':','_'),'.','_'),\n    '.csv'\n)",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "Log Exception - Copy",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Extraction Logs To ADLS",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[log_exception]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"category": {
										"value": "InternalError",
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"error_msg": {
										"value": {
											"value": "@activity('Copy Extraction Logs To ADLS').Error.Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Batch Failed - Copy",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Log Exception - Copy",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Failed",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Log Exception - Get Logs",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Extraction Logs",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[log_exception]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"category": {
										"value": "FailedLogsXUExtraction",
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"error_msg": {
										"value": {
											"value": "@activity('Get Extraction Logs').Error.Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Batch Failed - Get Logs",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Log Exception - Get Logs",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Failed",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Batch Succesful",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Copy Extraction Logs To ADLS",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[update_batch_status]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"end_date_time": {
										"value": {
											"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"status": {
										"value": "Succeeded",
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Store XU Extraction Logs Batch",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[set_batch]",
								"storedProcedureParameters": {
									"activity": {
										"value": "StoreXUExtractionLog",
										"type": "String"
									},
									"batch_id": {
										"value": {
											"value": "@variables('batch_id_StoreXUExtractionLog')",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"directory_path": {
										"value": {
											"value": "@pipeline().parameters.adls_directory_path_In",
											"type": "Expression"
										},
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@pipeline().parameters.entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"file_name": {
										"value": {
											"value": "@variables('adlsFileName')",
											"type": "Expression"
										},
										"type": "String"
									},
									"file_path": {
										"value": null,
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().parameters.run_id",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"size_bytes": {
										"value": null,
										"type": "Int64"
									},
									"source_layer": {
										"value": null,
										"type": "String"
									},
									"start_date_time": {
										"value": {
											"value": "@formatDateTime(utcNow(), 'yyyy-MM-dd HH:mm:ss')",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"status": {
										"value": "InProgress",
										"type": "String"
									},
									"target_layer": {
										"value": null,
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "If S4H Extraction Timestamp Empty",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "If Extract Required",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@empty(variables('extraction_Timestamp'))",
						"type": "Expression"
					},
					"ifTrueActivities": [
						{
							"name": "Lookup XU Extraction Timestamp",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "SELECT output\nFROM batch\nWHERE batch_id = '@{variables('batch_id_Extract')}'",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "ds_orch_db",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Set XU Extraction Timestamp",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Lookup XU Extraction Timestamp",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "extraction_Timestamp",
								"value": {
									"value": "@activity('Lookup XU Extraction Timestamp').output.firstRow.timestamp",
									"type": "Expression"
								}
							}
						}
					]
				}
			}
		],
		"parameters": {
			"entity_name": {
				"type": "string",
				"defaultValue": "I_CostCenter_F"
			},
			"entity_id": {
				"type": "string",
				"defaultValue": "1"
			},
			"date": {
				"type": "string",
				"defaultValue": "2022/04/21"
			},
			"run_id": {
				"type": "string",
				"defaultValue": "a1fe4011-b0aa-4e82-814e-5521537c78db"
			},
			"layer_nk": {
				"type": "string",
				"defaultValue": "S4H"
			},
			"client_field": {
				"type": "string",
				"defaultValue": "MANDT"
			},
			"extraction_type": {
				"type": "string",
				"defaultValue": "ODP"
			},
			"pk_field_names": {
				"type": "string",
				"defaultValue": "CONTROLLINGAREA, COSTCENTER, VALIDITYENDDATE"
			},
			"source_database_name": {
				"type": "string"
			},
			"source_schema_name": {
				"type": "string"
			},
			"source_table_name": {
				"type": "string",
				"defaultValue": "I_CostCenter"
			},
			"source_date_field_name": {
				"type": "string"
			},
			"adls_container_name": {
				"type": "string",
				"defaultValue": "s4h-cad"
			},
			"adls_directory_path_In": {
				"type": "string",
				"defaultValue": "DIMENSION/I_CostCenter_F/Theobald/ODP/Full/In/2022/04/21"
			},
			"adls_directory_path_Out": {
				"type": "string",
				"defaultValue": "DIMENSION/I_CostCenter_F/Theobald/ODP/Full/Out/2022/04/21"
			},
			"base_schema_name": {
				"type": "string",
				"defaultValue": "base_s4h_cax"
			},
			"base_sproc_name": {
				"type": "string"
			},
			"base_table_name": {
				"type": "string",
				"defaultValue": "I_CostCenter"
			},
			"required_activities": {
				"type": "array",
				"defaultValue": [
					"ExtractFromSourceAndLoadInADLS",
					"RunXUExtraction",
					"CheckXUExtractionStatus",
					"StoreXUExtractionLogs"
				]
			},
			"skipped_activities": {
				"type": "object"
			},
			"file_name": {
				"type": "string"
			}
		},
		"variables": {
			"adlsFileName": {
				"type": "String"
			},
			"batch_id_Extract": {
				"type": "String",
				"defaultValue": "@guid()"
			},
			"extraction_Output": {
				"type": "String"
			},
			"extraction_Timestamp": {
				"type": "String"
			},
			"batch_id_StoreXUExtractionLog": {
				"type": "String",
				"defaultValue": "@guid()"
			}
		},
		"folder": {
			"name": "00 ELT"
		},
		"annotations": []
	}
}