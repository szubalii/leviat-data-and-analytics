{
	"name": "pl_USASnowflake_ADLS_ingestion",
	"properties": {
		"activities": [
			{
				"name": "Copy SnowFlake to ADLS",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Get Query Without ColumnName Spaces",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 10,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "@{activity('Get Query Without ColumnName Spaces').output.value[0].QUERY}",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand",
							"additionalCopyOptions": {
								"MAX_FILE_SIZE": "104857600"
							}
						}
					},
					"sink": {
						"type": "ParquetSink",
						"storeSettings": {
							"type": "AzureBlobStorageWriteSettings"
						},
						"formatSettings": {
							"type": "ParquetWriteSettings"
						}
					},
					"enableStaging": false
				},
				"inputs": [
					{
						"referenceName": "ds_snowflake_oidatahub__LEVIAT_DB",
						"type": "DatasetReference",
						"parameters": {
							"schema": {
								"value": "@pipeline().parameters.source_schema_name",
								"type": "Expression"
							},
							"table": {
								"value": "@pipeline().parameters.source_table_name",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "ds_blob_parquet_file",
						"type": "DatasetReference",
						"parameters": {
							"container": {
								"value": "@pipeline().parameters.adls_container_name",
								"type": "Expression"
							},
							"directory": {
								"value": "@pipeline().parameters.target_adls_directory_path",
								"type": "Expression"
							},
							"file": {
								"value": "@pipeline().parameters.file_name",
								"type": "Expression"
							}
						}
					}
				]
			},
			{
				"name": "Get Query Without ColumnName Spaces",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Update Batch File Name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "SnowflakeSource",
						"query": {
							"value": "select CONCAT('SELECT ',a.listclmns,' FROM ','@{pipeline().parameters.source_database_name}','.', \n              '@{pipeline().parameters.source_schema_name}','.',\n              '@{pipeline().parameters.source_table_name}',\n              ' ',where_condition) as query \nfrom(\nSELECT \n  LISTAGG(concat('\"',c.column_name,'\"',' as ','\"',replace(c.column_name,' ',''),'\"'),', ') within group (order by c.ORDINAL_POSITION) as listclmns,\n  CASE \n    WHEN '@{pipeline().parameters.source_date_field_name}' != '' AND '@{pipeline().parameters.source_date_field_name}' IS NOT NULL\n    THEN ' WHERE @{pipeline().parameters.source_date_field_name} >= ''2020-01-01'''\n    ELSE ''\n  END as where_condition\n                \nFROM LEVIAT_DB.information_schema.columns c \nJOIN LEVIAT_DB.information_schema.tables t\nON c.table_name = t.table_name\nWHERE t.table_name =  '@{pipeline().parameters.source_table_name}') a",
							"type": "Expression"
						},
						"exportSettings": {
							"type": "SnowflakeExportCopyCommand"
						}
					},
					"dataset": {
						"referenceName": "ds_snowflake_oidatahub__LEVIAT_DB",
						"type": "DatasetReference",
						"parameters": {
							"schema": {
								"value": "@pipeline().parameters.source_schema_name",
								"type": "Expression"
							},
							"table": {
								"value": "@pipeline().parameters.source_table_name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Update Batch File Name",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"file_name": {
							"value": {
								"value": "@pipeline().parameters.file_name",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Batch Succeeded",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy SnowFlake to ADLS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"size_bytes": {
							"value": {
								"value": "@activity('Copy SnowFlake to ADLS').output.dataWritten",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"status": {
							"value": "Succeeded",
							"type": "String"
						},
						"directory_path": {
							"value": {
								"value": "@pipeline().parameters.target_adls_directory_path",
								"type": "Expression"
							},
							"type": "String"
						},
						"file_name": {
							"value": {
								"value": "@pipeline().parameters.file_name",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Batch Failed - Copy",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Log Exception - Copy",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": "Failed",
							"type": "String"
						},
						"size_bytes": {
							"value": null,
							"type": "Int64"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Exception - Get Query",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Query Without ColumnName Spaces",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[log_exception]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"category": {
							"value": "InternalError",
							"type": "String"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"error_msg": {
							"value": {
								"value": "@activity('Get Query Without ColumnName Spaces').Error.Message",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Batch Failed - Get Query",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Log Exception - Get Query",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[update_batch_status]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": "Failed",
							"type": "String"
						},
						"size_bytes": {
							"value": null,
							"type": "Int64"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Exception - Copy",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy SnowFlake to ADLS",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[log_exception]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": {
								"value": "@pipeline().parameters.batch_id",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"category": {
							"value": "InternalError",
							"type": "String"
						},
						"entity_id": {
							"value": {
								"value": "@pipeline().parameters.entity_id",
								"type": "Expression"
							},
							"type": "Int64"
						},
						"error_msg": {
							"value": {
								"value": "@activity('Copy SnowFlake to ADLS').Error.Message",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().parameters.run_id",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Fail Getting Query without ColumnName Spaces",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Update Batch Failed - Get Query",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat(\n    'Failed getting query without ColumnName Spaces',\n    activity('Get Query Without ColumnName Spaces').Error.Message\n)",
						"type": "Expression"
					},
					"errorCode": "500"
				}
			},
			{
				"name": "Fail2",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Update Batch Failed - Copy",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat(\n    'Failed to copy Snowflake data',\n    activity('Copy SnowFlake to ADLS').Error.Message\n)",
						"type": "Expression"
					},
					"errorCode": "500"
				}
			}
		],
		"parameters": {
			"source_database_name": {
				"type": "string"
			},
			"source_schema_name": {
				"type": "string"
			},
			"source_table_name": {
				"type": "string"
			},
			"source_date_field_name": {
				"type": "string"
			},
			"adls_container_name": {
				"type": "string"
			},
			"target_adls_directory_path": {
				"type": "string"
			},
			"file_name": {
				"type": "string"
			},
			"run_id": {
				"type": "string"
			},
			"entity_id": {
				"type": "string"
			},
			"batch_id": {
				"type": "string"
			}
		},
		"folder": {
			"name": "00 ELT/01 ADLS Ingestion/USA Snowflake"
		},
		"annotations": [],
		"lastPublishTime": "2021-10-25T15:25:00Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}