{
	"name": "pl_Base_ELT_main_v2",
	"properties": {
		"activities": [
			{
				"name": "Get Scheduled Entity Batch Activities",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Start Pipeline Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT * \nFROM [dbo].[get_scheduled_entity_batch_activities] (\n    @{pipeline().parameters.adhoc},\n    '@{pipeline().parameters.date}',\n    @{pipeline().parameters.rerun_successful_full_entities}\n)\nWHERE\n    @{pipeline().parameters.entity_filter}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_orch_db",
						"type": "DatasetReference",
						"parameters": {
							"sqlDb": {
								"value": "@pipeline().globalParameters.sqlDb",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Start Pipeline Log",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Stringify Parameters",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[set_pipeline_log]",
					"storedProcedureParameters": {
						"message": {
							"value": {
								"value": "@{pipeline().TriggerType} execution triggered at @{pipeline().TriggerTime}",
								"type": "Expression"
							},
							"type": "String"
						},
						"pipeline_name": {
							"value": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"start_date_time": {
							"value": {
								"value": "@formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"status": {
							"value": "InProgress",
							"type": "String"
						},
						"user_name": {
							"value": {
								"value": "@pipeline().GroupId",
								"type": "Expression"
							},
							"type": "String"
						},
						"parent_run_id": {
							"value": {
								"value": "@pipeline().parameters.parent_run_id",
								"type": "Expression"
							}
						},
						"parameters": {
							"value": {
								"value": "@variables('parameters')",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Pipeline Success",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Process Each Entity",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[change_status_pipeline_log]",
					"storedProcedureParameters": {
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"message": {
							"value": {
								"value": "Finished successfully",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": {
								"value": "Succeeded",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Exception Get Entity Batch Activities",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Get Scheduled Entity Batch Activities",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[log_exception]",
					"storedProcedureParameters": {
						"batch_id": {
							"value": null,
							"type": "Guid"
						},
						"category": {
							"value": "InternalError",
							"type": "String"
						},
						"entity_id": {
							"value": null,
							"type": "Int64"
						},
						"error_msg": {
							"value": {
								"value": "@activity('Get Scheduled Entity Batch Activities').Error.Message",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Log Pipeline ForEach Failure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Process Each Entity",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[change_status_pipeline_log]",
					"storedProcedureParameters": {
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"message": {
							"value": {
								"value": "Execution Failed",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": {
								"value": "Failed",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Process Each Entity",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Scheduled Entity Batch Activities",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Truncate Each Delta Table",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get Scheduled Entity Batch Activities').output.value",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 10,
					"activities": [
						{
							"name": "Execute ELT",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "pl_Base_ELT_entity_v2",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"entity_name": {
										"value": "@item().entity_name",
										"type": "Expression"
									},
									"entity_id": {
										"value": "@item().entity_id",
										"type": "Expression"
									},
									"date": {
										"value": "@pipeline().parameters.date",
										"type": "Expression"
									},
									"run_id": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"layer_nk": {
										"value": "@item().layer_nk",
										"type": "Expression"
									},
									"client_field": {
										"value": "@item().client_field",
										"type": "Expression"
									},
									"extraction_type": {
										"value": "@item().extraction_type",
										"type": "Expression"
									},
									"pk_field_names": {
										"value": "@item().pk_field_names",
										"type": "Expression"
									},
									"source_database_name": {
										"value": "@item().axbi_database_name",
										"type": "Expression"
									},
									"source_schema_name": {
										"value": "@item().axbi_schema_name",
										"type": "Expression"
									},
									"source_table_name": {
										"value": "@item().base_table_name",
										"type": "Expression"
									},
									"source_date_field_name": {
										"value": "@item().axbi_date_field_name",
										"type": "Expression"
									},
									"adls_container_name": {
										"value": "@item().adls_container_name",
										"type": "Expression"
									},
									"adls_directory_path_In": {
										"value": "@item().adls_directory_path_In",
										"type": "Expression"
									},
									"adls_directory_path_Out": {
										"value": "@item().adls_directory_path_Out",
										"type": "Expression"
									},
									"base_schema_name": {
										"value": "@item().base_schema_name",
										"type": "Expression"
									},
									"base_sproc_name": {
										"value": "@item().base_sproc_name",
										"type": "Expression"
									},
									"base_table_name": {
										"value": "@item().base_table_name",
										"type": "Expression"
									},
									"required_activities": {
										"value": "@if(\n    empty(item().required_activities),\n    json('[]'),\n    json(item().required_activities)\n)",
										"type": "Expression"
									},
									"skipped_activities": {
										"value": "@if(\n    empty(item().skipped_activities),\n    null,\n    json(item().skipped_activities)\n)",
										"type": "Expression"
									},
									"file_name": {
										"value": "@item().file_name",
										"type": "Expression"
									},
									"update_mode": {
										"value": "@item().update_mode",
										"type": "Expression"
									},
									"s4h_system_id": {
										"value": "@pipeline().parameters.s4h_system_id",
										"type": "Expression"
									},
									"s4h_client_id": {
										"value": "@pipeline().parameters.s4h_client_id",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Log Exception ELT",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Execute ELT",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[log_exception]",
								"storedProcedureParameters": {
									"batch_id": {
										"value": null,
										"type": "Guid"
									},
									"category": {
										"value": "InternalError",
										"type": "String"
									},
									"entity_id": {
										"value": {
											"value": "@item().entity_id",
											"type": "Expression"
										},
										"type": "Int64"
									},
									"error_msg": {
										"value": {
											"value": "@activity('Execute ELT').Error.Message",
											"type": "Expression"
										},
										"type": "String"
									},
									"run_id": {
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										},
										"type": "Guid"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference",
								"parameters": {
									"sqlDb": {
										"value": "@pipeline().globalParameters.sqlDb",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Fail Entity Pipeline",
							"type": "Fail",
							"dependsOn": [
								{
									"activity": "Log Exception ELT",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"message": {
									"value": "Pipeline 'Execute ELT' failed for entity @{item().entity_name}",
									"type": "Expression"
								},
								"errorCode": "500"
							}
						}
					]
				}
			},
			{
				"name": "Log Pipeline Failure",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Log Exception Get Entity Batch Activities",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[dbo].[change_status_pipeline_log]",
					"storedProcedureParameters": {
						"end_date_time": {
							"value": {
								"value": "@formatDateTime(utcnow(), 'yyyy-MM-dd HH:mm:ss')",
								"type": "Expression"
							},
							"type": "DateTime"
						},
						"message": {
							"value": {
								"value": "Execution Failed",
								"type": "Expression"
							},
							"type": "String"
						},
						"run_id": {
							"value": {
								"value": "@pipeline().RunId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"status": {
							"value": {
								"value": "Failed",
								"type": "Expression"
							},
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "ls_sqlsrv_xxxx_sls_x_euw_001__sqldb_xxxx_sls_x_euw_001",
					"type": "LinkedServiceReference",
					"parameters": {
						"sqlDb": {
							"value": "@pipeline().globalParameters.sqlDb",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get List of Delta Tables",
				"description": "Truncate delta tables at the beginning of the run. \nFull tables are only truncated when data is actually loaded from parquet to Synapse Base. As multiple parquet files can be loaded to the same table, one cannot truncate before each load for delta tables. ",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Start Pipeline Log",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "SELECT base_schema_name, base_table_name \nFROM dbo.get_scheduled_entities(\n    @{pipeline().parameters.adhoc},\n    '@{pipeline().parameters.date}'\n)\nWHERE\n    update_mode = 'Delta'\n    AND\n    layer_nk <> 'EDW'\n    AND\n    @{pipeline().parameters.entity_filter}",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "ds_orch_db",
						"type": "DatasetReference",
						"parameters": {
							"sqlDb": {
								"value": "@pipeline().globalParameters.sqlDb",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Truncate Each Delta Table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get List of Delta Tables",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get List of Delta Tables').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Truncate Delta Table",
							"description": "Truncate delta tables at the beginning of the run. \nFull tables are only truncated when data is actually loaded from parquet to Synapse Base. As multiple parquet files can be loaded to the same table, one cannot truncate before each load for delta tables. ",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[utilities].[sp_truncate_table]",
								"storedProcedureParameters": {
									"schema_name": {
										"value": {
											"value": "@item().base_schema_name",
											"type": "Expression"
										},
										"type": "String"
									},
									"table_name": {
										"value": {
											"value": "@item().base_table_name",
											"type": "Expression"
										},
										"type": "String"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "ls_ws_xxxx_sls_x_euw_001__syndw_xxxx_sls_x_euw_001",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Fail Getting Batch Activities",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Log Pipeline Failure",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": {
						"value": "@concat(\n    'Getting scheduled batch activities failed: ',\n    activity('Get Scheduled Entity Batch Activities').Error.Message\n)",
						"type": "Expression"
					},
					"errorCode": "500"
				}
			},
			{
				"name": "Fail",
				"type": "Fail",
				"dependsOn": [
					{
						"activity": "Log Pipeline ForEach Failure",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"message": "One or more entities failed",
					"errorCode": "500"
				}
			},
			{
				"name": "Stringify Parameters",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Parameters for Run",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "parameters",
					"value": {
						"value": "@string(activity('Get Parameters for Run').output.parameters)",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get Parameters for Run",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"url": {
						"value": "@concat(\n    'https://management.azure.com/subscriptions/',\n    'f199b488-7d9d-4992-aeda-c10a1e1c9b9e',\n    '/resourceGroups/',\n    pipeline().globalParameters.resourceGroupName,\n    '/providers/Microsoft.DataFactory/factories/',\n    pipeline().DataFactory,\n    if(equals(pipeline().TriggerName, 'Sandbox'), '/sandboxpipelineruns/', '/pipelineruns/'),\n    pipeline().RunId,\n    if(equals(pipeline().TriggerName, 'Sandbox'), '?api-version=2017-09-01-preview', '?api-version=2018-06-01')\n)",
						"type": "Expression"
					},
					"method": "GET",
					"authentication": {
						"type": "MSI",
						"resource": "https://management.core.windows.net/"
					}
				}
			}
		],
		"parameters": {
			"adhoc": {
				"type": "int",
				"defaultValue": 1
			},
			"entity_filter": {
				"type": "string",
				"defaultValue": "entity_id IN (85)"
			},
			"parent_run_id": {
				"type": "string"
			},
			"date": {
				"type": "string",
				"defaultValue": "2023/03/22"
			},
			"rerun_successful_full_entities": {
				"type": "int",
				"defaultValue": 0
			},
			"s4h_system_id": {
				"type": "string",
				"defaultValue": "CAA"
			},
			"s4h_client_id": {
				"type": "int",
				"defaultValue": 200
			}
		},
		"variables": {
			"parameters": {
				"type": "String"
			}
		},
		"folder": {
			"name": "00 ELT"
		},
		"annotations": []
	}
}