steps:

# MS Azure SQL Edge instance (mcr.microsoft.com/azure-sql-edge) doesn't support tSQLt to use SQL Server 2022
- script: |
    docker run --name test-dwh -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=$(mssql-sa-pwd)" -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest
  displayName: 'Start a mssql-server instance for SQL Server 2022'

- script: |
    docker cp '$(System.DefaultWorkingDirectory)/orchestration/src/config/' test-dwh:/
  displayName: 'Copy Orchestration config to docker instance'

- script: |
    dotnet build "$(System.DefaultWorkingDirectory)/synapse-dwh/TestDWH/TestDWH.sqlproj" /p:NetCoreBuild=true
  displayName: 'Build Test sqlproj'

- script: |
    sqlpackage /Action:Publish /SourceFile:"$(System.DefaultWorkingDirectory)/synapse-dwh/syndw_xxxx_sls_d_euw_001/bin/Debug/syndw_xxxx_sls_d_euw_001.dacpac" \
    /TargetConnectionString:"Server=localhost;Initial Catalog=TestDWH;User ID=sa;Password=$(mssql-sa-pwd);Encrypt=False;TrustServerCertificate=False;Connection Timeout=30;"
  displayName: 'Deploy Synapse SQL Pool dacpac to Docker Container'
  
- script: |
    sqlpackage /Action:Publish /SourceFile:"$(System.DefaultWorkingDirectory)/synapse-dwh/TestDWH/bin/Debug/TestDWH.dacpac" \
    /TargetConnectionString:"Server=localhost;Initial Catalog=TestDWH;User ID=sa;Password=$(mssql-sa-pwd);Encrypt=False;TrustServerCertificate=False;Connection Timeout=30;"
  displayName: 'Deploy Test dacpac to Docker Container'

- task: PowerShell@2
  displayName: Install SQLServer Module
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      Install-Module -Name SQLServer -force

- task: PowerShell@2
  displayName: 'Validate EDW Execution Orders'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |

      $connectionString = "Data Source=localhost;User ID=sa;Password=$(mssql-sa-pwd);Initial Catalog=TestDWH;TrustServerCertificate=true";
      $sqlCommand = 'SELECT * FROM utilities.vw_edw_entity_execution_order_issue';
      Invoke-Sqlcmd -ConnectionString $connectionString -Query $sqlCommand | Format-Table -Width 125
      $DS = Invoke-Sqlcmd -ConnectionString $connectionString -Query $sqlCommand -As DataSet
      $DS.Tables[0].Rows | %{ echo "| $($_['root_view_name']), $($_['root_view_execution_order']), $($_['referenced_view_name']), $($_['referenced_view_execution_order']) |" }
      
      if ($DS.Tables[0].Rows.Count -gt 0) {

        Write-Host "##[error]EDW entities identified with incorrect execution order"
        Write-Host "##[error]Make sure EDW entities have a higher execution order than the execution order of their referenced child entities."

        exit 1
      }

# For each edw entity, check if the output columns in the materialization view correspond with the 
# target columns in the target table. Output a warning if discrepancies are detected.
- task: PowerShell@2
  displayName: 'Validate EDW Materialization Columns'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |

      $connectionString = "Data Source=localhost;User ID=sa;Password=$(mssql-sa-pwd);Initial Catalog=TestDWH;TrustServerCertificate=true";
      $sqlCommand = 'SELECT * FROM utilities.vw_edw_entity_column_discrepancy';
      Invoke-Sqlcmd -ConnectionString $connectionString -Query $sqlCommand | Format-Table -Width 125
      $DS = Invoke-Sqlcmd -ConnectionString $connectionString -Query $sqlCommand -As DataSet
      
      if ($DS.Tables[0].Rows.Count -gt 0) {

        Write-Host "##[warning]EDW entities identified with for which the source view columns don't correspond with the target table columns."
        Write-Host "##[warning]Make sure the target table columns exist in the source view output and vice versa."

        exit 1
      }

- script: |
    sqlcmd \
      -S localhost \
      -d TestDWH \
      -U sa \
      -P "$(mssql-sa-pwd)" \
      -y 35 \
      -Y 35 \
      -i "$(System.DefaultWorkingDirectory)/synapse-dwh/Scripts/Validate EDW Materialization Columns.sql"
  displayName: 'Validate EDW Materialization Columns'


# User powershell instead of direct sqlcmd due to issues in fixed length of output of xml results
# Also, xml output has incorrect headers by default which need to be removed which is done using powershell
- script: |
    sqlcmd \
      -S localhost \
      -d TestDWH \
      -U sa \
      -P "$(mssql-sa-pwd)" \
      -Q "EXEC tSQLt.RunAll;"
  displayName: 'Run TSQLT tests'

- task: PowerShell@2
  displayName: 'Export Test Results'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      $xmloutput = "";
      $connectionString = "Data Source=localhost;User ID=sa;Password=$(mssql-sa-pwd);Initial Catalog=TestDWH";
      $sqlCommand = 'EXEC tSQLt.XmlResultFormatter';
      $connection = new-object system.data.SqlClient.SQLConnection($connectionString);
      $command = new-object system.data.sqlclient.sqlcommand($sqlCommand,$connection);
      $connection.Open();
      $adapter = New-Object System.Data.sqlclient.sqlDataAdapter $command;
      $dataset = New-Object System.Data.DataSet;
      $adapter.Fill($dataset) | Out-Null;
      $connection.Close();
      if ($dataset.Tables[0].Rows.Count -gt 0) {
        foreach ($dr in $dataset.Tables[0].Rows) {
          $xmloutput += $dr.ItemArray[0].ToString();
        }
      }
      $xmloutput;
      $xmloutput | Out-File "$(System.DefaultWorkingDirectory)/synapse-dwh/TestDWH/bin/Debug/TEST-Results.xml"

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/TEST-*.xml'
    failTaskOnFailedTests: true
