trigger: none # triggered by PR


variables:
- template: ../../build/variables-test.yml
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - name: xuPrefix
    value: $(System.PullRequest.PullRequestId)
  - name: commitId
    value: $(System.PullRequest.SourceCommitId)
- ${{ elseif eq(variables['Build.Reason'], 'Manual') }}:
  - name: xuPrefix
    value: PR0000

jobs:
- job: BUILD_DEPLOY
  variables:
  - name: storageAccountName
    value: stprteuw001
  # - name: S4HSystemId_
  #   value: $(S4HSystemId)
  # - name: S4HClientId_
  #   value: $(S4HClientId)
  - name: destination
    value: $[ format('{0}_s4h-{1}-{2}', variables['storageAccountName'], variables['S4HSystemId'], variables['S4HClientId']) ]
  pool:
    name: 'VM'
    demands:
    - node.js
    - VisualStudio
    - Agent.ComputerName -equals $(VMName)
  steps:
  - template: ./steps-build.yml
  # - template: ./steps-artifact.yml
  # steps:
  # Update the source and destinations in the extractions
  - task: FileTransform@1
    displayName: 'File Transform: Destination and Source in Extractions'
    inputs:
      folderPath: '$(Build.SourcesDirectory)/xu-config/extractions'
      fileType: json
      targetFiles: '**/general.json'
  
    # Copy Repo XU Config Extractions to ADLS
    # This is used by ADF to know which extraction is configured to use file splitting
  # - task: PowerShell@2
  #   displayName: 'Copy XU Config to ADLS'
  #   inputs:
  #     targetType: 'inline'
  #     pwsh: true
  #     script: |
  #       # connect to Azure using VM
  #       azcopy login --identity
  
  #       # directly copy to storage account using azcopy
  #       azcopy copy `
  #         '$(Build.SourcesDirectory)/xu-config/extractions\*' `
  #         'https://$(storageAccountName).dfs.core.windows.net/xu-configuration/extractions' `
  #         --recursive
  
  # Update the extraction names by renaming the folders to include the environment prefix
  # - script: for /d %D in ("$(System.DefaultWorkingDirectory)\xu-config\extractions\*") do ren "%D" "$(environment)_%~nxD"
  - task: PowerShell@2
    displayName: Add environment prefix to extraction folder names
    inputs:
      targetType: 'inline'
      pwsh: true
      script: |
        Get-ChildItem -Path '$(Build.SourcesDirectory)/xu-config/extractions' |
        Foreach-Object {Rename-Item -Path $_.FullName -NewName ("$(xuPrefix)_"+($_.Name))}
  
  
  
    # Copy Repo XU Config to VM XU Config
  - task: CopyFiles@2
    displayName: 'Copy Repo XU Config to VM XU Config'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/xu-config/extractions'
      Contents: '$(xuPrefix)*/**/*.json' # copy only those extractions required for deployment
      TargetFolder: 'C:\Program Files\XtractUniversal\config\extractions'
      OverWrite: true

- job: RUN_EXTRACTIONS
  dependsOn: BUILD_DEPLOY
  pool:
    name: 'VM'
    demands:
    - node.js
    - VisualStudio
    - Agent.ComputerName -equals $(VMName)
  steps:
  - task: PowerShell@2
    displayName: 'Get Changed Extractions'
    name: GetChangedExtractions
    inputs:
      filePath: $(System.DefaultWorkingDirectory)/xu-config/src/getChangedExtractions.ps1
      arguments: >
        -commitId $(commitId)
      pwsh: true
  - script: |
      "C:\Program Files\XtractUniversal\xu.exe" -s localhost -p 8065 -n 3295_I_BrandText

    
# - job: GET_CHANGED_EXTRACTIONS
#   pool:
#     vmImage: 'ubuntu-20.04'
#   steps:
#   - checkout: self
#     fetchDepth: 0 # disables shallow fetch and results in correct return of git diff-tree
  
#   # - bash: |
#   #     git diff --name-only $(System.PullRequest.SourceCommitId)^!
#   #     git diff --name-only $SYSTEM_PULLREQUEST_SOURCECOMMITID^!

#   #     $(git diff --name-only $(System.PullRequest.SourceCommitId)^!)
#   #     $(git diff --name-only $SYSTEM_PULLREQUEST_SOURCECOMMITID^!)

#   - pwsh: |
#       git diff --name-only 199bf9131748a7e07d4074baf8f7dd2daf94d963^!
#       git diff --name-only $(commitId)^!
# - job: TEST_XU_CONFIG
#   variables:
  
#   pool: 'VM'
#   demands:
#   - node.js
#   - VisualStudio
#   - Agent.ComputerName -equals $(VMName)
  
#   steps:
#   - script


# - job: CLEAN_UP
#   pool:
#     name: 'VM'
#     demands:
#     - node.js
#     - VisualStudio
#     - Agent.ComputerName -equals $(VMName)
#   steps:
