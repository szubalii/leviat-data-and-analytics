trigger: none # triggered by PR

variables:
- name: testOrchDb
  value: TestOrchestrationDB

jobs:
- job: TEST_ORCH_DB_Container
  variables:
  - template: ../../build/variables-test.yml
  - name: buildConfiguration
    value: 'Debug'
  
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
  - template: ./steps-test-container.yml


# - job: TEST_ORCH_DB
#   variables:
#   - template: ../../build/variables-test.yml
#   - name: buildConfiguration
#     value: 'Debug'
  
#   pool:
#     name: 'VM'
#     demands:
#     - node.js
#     - VisualStudio
#     - Agent.ComputerName -equals $(VMName)
#   steps:
#   - script: |
#       dotnet build "$(System.DefaultWorkingDirectory)/orchestration/TestOrchestrationDB/TestOrchestrationDB.sqlproj" /p:NetCoreBuild=true
#     displayName: 'Build Test sqlproj'
#   - task: SqlAzureDacpacDeployment@1
#     displayName: 'Deploy Test dacpac'
#     inputs:
#     # make sure that the service principal arm-pipeline (defined as leviatazure-Pilot_Leviat_Sales) is set as login in the server with permission
#     # to create databases (##MS_DatabaseManager##) 
#     # Documentation: https://learn.microsoft.com/en-us/azure/azure-sql/database/security-server-roles?view=azuresql-db#fixed-server-level-roles
#       azureSubscription: 'arm-pipeline' 
#       AuthenticationType: 'server'
#       SqlUsername: 'sqladmin'
#       SqlPassword: '$(sqlsrv-xxxx-sls-x-euw-001--sqladminPassword)'
#       ServerName: 'sqlsrv-xxxx-sls-d-euw-001.database.windows.net'
#       DatabaseName: $(testOrchDb)
#       DacpacFile: '$(System.DefaultWorkingDirectory)/orchestration/TestOrchestrationDB/bin/Debug/TestOrchestrationDB.dacpac'
#       # AdditionalArguments: '/v:masterKeyPwd=$(sqlsrv-xxxx-sls-x-euw-001-masterKeyPwd) /v:sasToken_OrchDB=$(sasToken_OrchDB) /v:containerURL=https://$(storageAccountName).blob.core.windows.net/orch-db'

#   - task: SqlAzureDacpacDeployment@1
#     displayName: 'Deploy Orch DB dacpac'
#     inputs:
#       azureSubscription: 'arm-pipeline'
#       AuthenticationType: 'server'
#       SqlUsername: 'sqladmin'
#       SqlPassword: '$(sqlsrv-xxxx-sls-x-euw-001--sqladminPassword)'
#       ServerName: 'sqlsrv-xxxx-sls-d-euw-001.database.windows.net'
#       DatabaseName: $(testOrchDb)
#       DacpacFile: '$(System.DefaultWorkingDirectory)/orchestration/sqldb-xxxx-orchdb-d-euw-001/bin/Debug/sqldb-xxxx-orchdb-d-euw-001.dacpac'
#       # AdditionalArguments: '/v:masterKeyPwd=$(sqlsrv-xxxx-sls-x-euw-001-masterKeyPwd) /v:sasToken_OrchDB=$(sasToken_OrchDB) /v:containerURL=https://$(storageAccountName).blob.core.windows.net/orch-db'
    
  
#   - script: |
#       sqlcmd ^
#         -S sqlsrv-xxxx-sls-d-euw-001.database.windows.net ^
#         -d $(testOrchDb) ^
#         -U sqladmin ^
#         -P $(sqlsrv-xxxx-sls-x-euw-001--sqladminPassword) ^
#         -Q "EXEC tSQLt.RunAll;"
#     displayName: 'Run TSQLT tests'


#   # User powershell instead of direct sqlcmd due to issues in fixed length of output of xml results
#   # Also, xml output has incorrect headers by default which need to be removed which is done using powershell
#   - task: PowerShell@2
#     displayName: 'Export Test Results'
#     inputs:
#       targetType: 'inline'
#       pwsh: true
#       script: |
#         $xmloutput = "";
#         $connectionString = "Data Source=sqlsrv-xxxx-sls-d-euw-001.database.windows.net;User ID=sqladmin;Password=$(sqlsrv-xxxx-sls-x-euw-001--sqladminPassword);Initial Catalog=$(testOrchDb)";
#         $sqlCommand = 'EXEC tSQLt.XmlResultFormatter';
#         $connection = new-object system.data.SqlClient.SQLConnection($connectionString);
#         $command = new-object system.data.sqlclient.sqlcommand($sqlCommand,$connection);
#         $connection.Open();
#         $adapter = New-Object System.Data.sqlclient.sqlDataAdapter $command;
#         $dataset = New-Object System.Data.DataSet;
#         $adapter.Fill($dataset) | Out-Null;
#         $connection.Close();
#         if ($dataset.Tables[0].Rows.Count -gt 0) {
#           foreach ($dr in $dataset.Tables[0].Rows) {
#             $xmloutput += $dr.ItemArray[0].ToString();
#           }
#         }
#         $xmloutput;
#         $xmloutput | Out-File "$(System.DefaultWorkingDirectory)/orchestration/TestOrchestrationDB/bin/Debug/TEST-Results.xml"


#   - task: PublishTestResults@2
#     inputs:
#       testResultsFormat: 'JUnit'
#       testResultsFiles: '**/TEST-*.xml'
#       failTaskOnFailedTests: true

#   #  drop the database in all cases
#   - script: |
#       sqlcmd ^
#         -S sqlsrv-xxxx-sls-d-euw-001.database.windows.net ^
#         -U sqladmin ^
#         -P $(sqlsrv-xxxx-sls-x-euw-001--sqladminPassword) ^
#         -Q "DROP DATABASE $(testOrchDb);"
#     displayName: 'Drop Database'
#     condition: always()