parameters:
- name: folder
  type: string
- name: target_env
  type: string
  values:
    - pers
    - test
    - qas
    - prod
  default: pers

variables:
- name: deployEnvPrefix
  value: '40_DUMMY'

# In case of CI triggered pipelines (IndividualCI, triggered by git push),
# use the system predefined variable Build.SourceBranchName to get the correct variable template
- ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
  - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
    - template: ./variables-test.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '20_TEST'
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'qas') }}:
    - template: ./variables-qas.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '10_QAS'
  - ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
    - template: ./variables-prod.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '00_PROD'
  # Get the personal variables template, user and deployment environment based on the source branch name. 
  - ${{ elseif or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
    - template: ./variables-personal.yml
    - name: user
      value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
    - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
      value: ${{ format('30_DEV_{0}', upper(variables.user)) }}
    - name: commitId
      value: $(Build.SourceVersion)
- ${{ elseif eq(variables['Build.Reason'], 'Manual') }}:
  - ${{ if eq(parameters.target_env, 'test') }}:
    - template: ./variables-test.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '20_TEST'
  - ${{ elseif eq(parameters.target_env, 'qas') }}:
    - template: ./variables-qas.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '10_QAS'
  - ${{ elseif eq(parameters.target_env, 'prod') }}:
    - template: ./variables-prod.yml
    - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
      value: '00_PROD'
  # Get the personal variables template, user and deployment environment based on the source branch name. 
  - ${{ elseif eq(parameters.target_env, 'pers') }}:
    - template: ./variables-personal.yml
    - name: user
      value: ${{ replace(split(variables['Build.RequestedForEmail'], '@')[0], 'adm_', '') }} #adm_mpors@crhemea.onmicrosoft.com
    # - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
    #   value: ${{ format('30_DEV_{0}', upper(variables['user'])) }}
    - name: commitId
      value: $(Build.SourceVersion)

- name: solution
  value: ${{ upper(replace( parameters.folder, '-', '_')) }}
- name: deployment_job_name
  # value: DEPLOY_AZURE_DATA_FACTORY_TO_30_DEV_MPORS
  value: ${{ format('DEPLOY_{0}_TO_{1}', variables['solution'], variables['deployEnvPrefix'] ) }}
- name: environment_name
  value: ${{ format('{0}_{1}', variables['deployEnvPrefix'], variables['solution'] ) }}
  # value: 30_DEV_MPORS_AZURE_DATA_FACTORY


stages:
- stage: VARIABLES
  jobs:
  - job: Vars
    steps:
    - checkout: none
    - script: |
        echo user: $(user)
        echo dataFactoryName: $(dataFactoryName)
        echo sqlDatabaseName: $(sqlDatabaseName)
        echo synapseSqlPool: $(synapseSqlPool)
        echo storageAccountName: $(storageAccountName)
        echo xuPrefix: $(xuPrefix)
        echo destination: $(destination)
        echo deployment_job_name: $(deployment_job_name)
        echo environment_name: $(environment_name)
        echo solution: $(solution)
        echo variables['Build.SourceBranchName']
        echo Build.SourceBranchName: $(Build.SourceBranchName)

- stage: DEPLOY
  jobs:
  # - template: ./jobs-deploy-solution.yml
  #   parameters:
  #     folder: ${{ parameters.folder }}
  #     solution: ${{ upper(replace( parameters.folder, '-', '_')) }}
  #     deployEnvPrefix: $[ variables['deployEnvPrefix'] ]
  - deployment: ${{ variables['deployment_job_name'] }}
    # ${{ if parameters.conditional }}:
    #   condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_${{ parameters.solution }}'], 'true')
    timeoutInMinutes: 120
    pool:
      name: 'VM'
      demands:
      - node.js
      - VisualStudio
      - Python.Version
      - Agent.ComputerName -equals $(VMName)
    environment:  ${{ format('{0}_{1}', '40_DUMMY', 'AZURE_DATA_FACTORY' ) }}
    workspace:
    # set clean to all when deploying xu-config
      ${{ if eq(parameters.folder, 'xu-config') }}: 
        clean: all
    strategy:
      runOnce:
        deploy:
          steps:
          - template: ../${{ parameters.folder }}/build/steps-deploy.yml