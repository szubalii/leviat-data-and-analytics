parameters:
- name: build_azure_data_factory
  displayName: Azure Data Factory
  type: boolean
  default: True
- name: build_orchestration
  displayName: Orchestration DB
  type: boolean
  default: True
- name: build_synapse_dwh
  displayName: Synapse DWH
  type: boolean
  default: True
- name: build_synapse_workspace
  displayName: Synapse Workspace
  type: boolean
  default: True
- name: build_xu_config
  displayName: Xtract Universal
  type: boolean
  default: True
- name: deploy_azure_data_factory
  displayName: Azure Data Factory
  type: boolean
  default: False 
  # How to make dependend parameter based on True value of build_azure_data_factory
- name: deploy_orchestration
  displayName: Orchestration DB
  type: boolean
  default: False
- name: deploy_synapse_dwh
  displayName: Synapse DWH
  type: boolean
  default: False
- name: deploy_synapse_workspace
  displayName: Synapse Workspace
  type: boolean
  default: False
- name: deploy_xu_config
  displayName: Xtract Universal
  type: boolean
  default: False

variables:
# Don't manual run deployments for main, qas, and prod branches
- name: isManualRunForSecuredBranches
  value: ${{ and(eq(variables['Build.Reason'], 'Manual'), in(variables['Build.SourceBranchName'], 'main', 'qas', 'prod')) }}

- name: synDWHSolution
  value: '**/synapse-dwh/*.sln'
- name: orchDBSolution
  value: '**/orchestration/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: ConnectionString
  value: $(SynapseTesterConnectionString)

# Set these default values in case of manually triggered pipelines
# These values will be overriden for production environment
# - name: VMName
#   value: WEALEVAPP001
# - name: VMResourceGroup
#   value: rg-xxxx-sls-a-euw-001

# variable 'deployEnvPrefix' needs to be defined without 
# reference to variables in template as templates variables
# cannot be used as source for name of environment and deployment
# in deployment job


# - ${{ elseif startsWith(variables['Build.SourceBranchName'], 'dev_') }}:
#   - name: user
#     value: $[ replace( variables['Build.SourceBranchName'], 'dev_', '') ]
#   - template: ./variables-personal.yml
# - ${{ elseif contains(variables['Build.SourceBranch'], '/dev/') }}:
#   - name: user
#     value: $[ variables['Build.SourceBranchName'] ]
#   - template: ./variables-personal.yml
#   - name: deployEnv # override value to map main branch to DEV deployment environment
#     value: ${{ format('DEV_{0}', upper(variables['Build.SourceBranchName'])) }}



# - ${{ else }}:
#   - name: deployEnv
#     value: ${{ format('{0}_{1}', variables.environmentIndex, variables.environment) }}


# # Required for PR triggered pipelines as predefined system variable Build.SourceBranchName
# # equals value: 'merge'. Also, the predefined system variable System.PullRequest.TargetBranch 
# # is not available in templates. So use separate build pipelines for each env and pass this as parameter value
# # https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#system-variables-devops-services


# store the latest source commit ID, used for running specific tests
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - name: commitId
    value: $(System.PullRequest.SourceCommitId)
- ${{ else }}:
  - name: commitId
    value: $(Build.SourceVersion)


stages:
- stage: VARIABLES
  jobs:
  - job: Vars
    pool:
      name: 'VM'
      demands:
      - node.js
      - VisualStudio
      - Agent.ComputerName -equals $(VMName)
    steps:
    # When this pipeline is run manually, only deployment to personal
    # environments is allowed, so no TEST, QAS, PROD
    # Include validation that branch names follow convention:
    #   main/qas/prod
    #   feature/<user>/<topic>
    #   users/<user>/<topic>
    #   hotfix/*** 
    # output variables
    - script: |
        echo system.pullRequest.targetBranch: $(system.pullRequest.targetBranch)
        echo isManualRunForSecuredBranches: $(isManualRunForSecuredBranches)
        echo user: $(user)
        echo dataFactoryName: $(dataFactoryName)
        echo sqlDatabaseName: $(sqlDatabaseName)
        echo synapseSqlPool: $(synapseSqlPool)
        echo storageAccountName: $(storageAccountName)
        echo xuPrefix: $(xuPrefix)
        echo destination: $(destination)
        echo Build.Reason: ${{ variables['Build.Reason'] }}
        echo Build.SourceBranch: ${{ variables['Build.SourceBranch'] }}
        echo Build.SourceBranchName: ${{ variables['Build.SourceBranchName'] }}
        echo deployEnvPrefix: ${{ variables.deployEnvPrefix }}
        echo parameters.build_synapse_dwh: ${{ parameters.build_synapse_dwh }}
        echo parameters.build_azure_data_factory: ${{ parameters.build_azure_data_factory }}
        echo parameters.build_orchestration: ${{ parameters.build_orchestration }}
        echo parameters.build_xu_config: ${{ parameters.build_xu_config }}
        echo parameters.build_synapse_workspace: ${{ parameters.build_synapse_workspace }}
        echo parameters.deploy_synapse_dwh: ${{ parameters.deploy_synapse_dwh }}
        echo parameters.deploy_azure_data_factory: ${{ parameters.deploy_azure_data_factory }}
        echo parameters.deploy_orchestration: ${{ parameters.deploy_orchestration }}
        echo parameters.deploy_xu_config: ${{ parameters.deploy_xu_config }}
        echo parameters.deploy_synapse_workspace: ${{ parameters.deploy_synapse_workspace }}
      displayName: Print Variables
- stage: VALIDATE
  jobs:
  - template: ./jobs-validate.yml
- stage: BUILD
  jobs:
  - template: ./jobs-build-solution.yml
    parameters:
      solutions:
      - name: 'synapse-dwh'
        build: ${{ parameters.build_synapse_dwh }}
      - name: 'azure-data-factory'
        build: ${{ parameters.build_azure_data_factory }}
      - name: 'orchestration'
        build: ${{ parameters.build_orchestration }}
      - name: 'xu-config'
        build: ${{ parameters.build_xu_config }}
      - name: 'synapse-workspace'
        build: ${{ parameters.build_synapse_workspace }}


- ${{ if and(or(parameters.deploy_synapse_dwh, parameters.deploy_orchestration, parameters.deploy_xu_config, parameters.deploy_synapse_workspace), eq(variables['isManualRunForSecuredBranches'], 'False')) }}:
  - stage: DEPLOY_1
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'synapse-dwh'
          deploy: ${{ parameters.deploy_synapse_dwh }}
          test: True
        - name: 'orchestration'
          deploy: ${{ parameters.deploy_orchestration }}
        - name: 'xu-config'
          deploy: ${{ parameters.deploy_xu_config }}
        - name: 'synapse-workspace'
          deploy: ${{ parameters.deploy_synapse_workspace }}
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
    
    # - ${{ if variables.buildAndDeploy_xu_config }}:
    #   - template: ./jobs-deploy-solution-helper.yml
    #     parameters:
    #       folder: xu-config
    #       deployEnvPrefix: ${{ variables.deployEnvPrefix }}
    # - ${{ if variables.buildAndDeploy_synapse_dwh }}:
    #   - template: ./jobs-deploy-solution-helper.yml
    #     parameters:
    #       folder: synapse-dwh
    #       deployEnvPrefix: ${{ variables.deployEnvPrefix }}
    #       test: true
    # - ${{ if variables.buildAndDeploy_orchestration }}:
    #   - template: ./jobs-deploy-solution-helper.yml
    #     parameters:
    #       folder: orchestration
    #       deployEnvPrefix: ${{ variables.deployEnvPrefix }}
    # - ${{ if variables.buildAndDeploy_synapse_workspace }}:
    #   - template: ./jobs-deploy-solution-helper.yml
    #     parameters:
    #       folder: synapse-workspace
    #       deployEnvPrefix: ${{ variables.deployEnvPrefix }}

  
  - ${{ if and(parameters.deploy_azure_data_factory, eq(variables['isManualRunForSecuredBranches'], 'False')) }}:
    - stage: DEPLOY_2
      jobs:
      - template: ./jobs-deploy-solution-helper.yml
        parameters:
          folder: azure-data-factory
          deployEnvPrefix: ${{ variables.deployEnvPrefix }}