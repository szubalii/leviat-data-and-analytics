# This pipeline is triggered whenever the build pipeline to main, qas or prod is completed
resources:
  pipelines:
  - pipeline: build
    source: 'Build Release'
    trigger:
      branches:
        include:
        - main
        - qas
        - prod

trigger: none

variables:
# In case of CI triggered pipelines (IndividualCI, triggered by git push),
# use the system predefined variable Build.SourceBranchName to get the correct variable template
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: ./variables-test.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '20_TEST'
- ${{ elseif eq(variables['Build.SourceBranchName'], 'qas') }}:
  - template: ./variables-qas.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '10_QAS'
- ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
  - template: ./variables-prod.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '00_PROD'
- name: commitId
  value: $(Build.SourceVersion)

stages:
# The pipeline deploys a solution if for that solution files have changed in their respective 
# folders. 
- ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
  - stage: CHECK_SOLUTIONS_DEPLOYMENT
    jobs:
    - job: CheckSolutionsDeployment
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - checkout: self
        fetchDepth: 0 # disables shallow fetch and results in correct return of git diff-tree
      
      - task: PowerShell@2
        displayName: 'Define which solutions deploy'
        name: SetVariables
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/src/libs/set-solutionDeploymentVarsRelease.ps1'
          arguments: >
            -commitId $(commitId)
          pwsh: true
          # script: |

          #   # Retrieve list of changed files
          #   Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          #   Write-Host "CommitID: $(commitId)"
          #   # Write-Host "Build.SourceVersion: $(Build.SourceVersion)"
          #   Write-Host "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
          #   $changedFiles = git diff --name-only $(commitId)^! #difference between parent of commit and commit
          #   # $changedFiles2 = $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
          #   Write-Host "The following files have changed:"
          #   $changedFiles

          #   $solutions = @('azure-data-factory', 'orchestration', 'synapse-dwh', 'synapse-workspace', 'xu-config')

          #   ForEach ($solution in $solutions) {
          #     $solutionFolder = $solution+'/';
          #     $solutionVarName = 'deploy_'+$solution.replace('-', '_');
          #     Write-Host 'Check if there are any changed files for folder '$solutionFolder':';

          #     # If a single file has changed
          #     if ($changedFiles.getType().Name -eq 'String') {
          #       # Changed file matches selected solution, so do deploy
          #       if ($changedFiles -match $solutionFolder){
          #         Write-Host 'The following files were changed:';
          #         $changedFiles -match $solutionFolder
          #         Write-Host 'Deployment of'$solution' will proceed.';
          #         Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]true";
          #       }
          #       # Changed file doesn't match solution, so don't deploy
          #       else {
          #         Write-Host 'No changed files found for'$solution'. Deployment of' $solution' will not take place.';
          #         Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]false";
          #       }
          #     }

          #     # If multiple files have changed            
          #     else {
          #       # No changed files match selected solution, so don't deploy
          #       if (($changedFiles -match $solutionFolder).count -eq 0){
          #         Write-Host 'No changed files found for'$solution'. Deployment of' $solution' will not take place.';
          #         Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]false";
          #       }
          #       # Changed files match solution, so do deploy
          #       else {
          #         Write-Host 'The following files were changed:';
          #         $changedFiles -match $solutionFolder
          #         Write-Host 'Deployment of'$solution' will proceed.';
          #         Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]true";
          #       }
          #     }
            # }
      # - pwsh: |
      #     Write-Host 'deploy_azure_data_factory:'$(SetVariables.deploy_azure_data_factory);
      #     Write-Host 'deploy_orchestration:'$(SetVariables.deploy_orchestration);
      #     Write-Host 'deploy_synapse_dwh:'$(SetVariables.deploy_synapse_dwh);
      #     Write-Host 'deploy_synapse_workspace:'$(SetVariables.deploy_synapse_workspace);
      #     Write-Host 'deploy_xu_config:'$(SetVariables.deploy_xu_config);

  - stage: DEPLOY_1_AUTO
    dependsOn: 
    - CHECK_SOLUTIONS_DEPLOYMENT
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'orchestration'
        - name: 'synapse-dwh'
        - name: 'synapse-workspace'
        - name: 'xu-config'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
        conditional: true
      
  - stage: DEPLOY_2_AUTO
    dependsOn: 
    - CHECK_SOLUTIONS_DEPLOYMENT
    - DEPLOY_1_AUTO
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'azure-data-factory'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
        conditional: true

# If triggered manually, deploy all solutions
- ${{ elseif eq(variables['Build.Reason'], 'Manual') }}:
  - stage: DEPLOY_1_MANUAL
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'orchestration'
        - name: 'synapse-dwh'
        - name: 'synapse-workspace'
        - name: 'xu-config'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}  

  - stage: DEPLOY_2_MANUAL
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'azure-data-factory'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
