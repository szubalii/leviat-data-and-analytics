trigger: none

parameters:
- name: runDeployment
  type: boolean
  default: false
- name: synapse_dwh
  type: boolean
  default: true
- name: azure_data_factory
  type: boolean
  default: true
- name: orchestration
  type: boolean
  default: true
- name: xu_config
  type: boolean
  default: true
- name: synapse_workspace
  type: boolean
  default: true
- name: clean
  type: string
  default: outputs
  values:
  - outputs
  - resources
  - all

variables:

- name: buildAndDeploy_synapse_dwh
  value: ${{ parameters.synapse_dwh }}
- name: buildAndDeploy_azure_data_factory
  value: ${{ parameters.azure_data_factory }}
- name: buildAndDeploy_orchestration
  value: ${{ parameters.orchestration }}
- name: buildAndDeploy_xu_config
  value: ${{ parameters.xu_config }}
- name: buildAndDeploy_synapse_workspace
  value: ${{ parameters.synapse_workspace }}
- name: clean
  value: ${{ parameters.clean }}


- name: synDWHSolution
  value: '**/synapse-dwh/*.sln'
- name: orchDBSolution
  value: '**/orchestration/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- name: ConnectionString
  value: $(SynapseTesterConnectionString)

# Set these default values in case of manually triggered pipelines
# These values will be overriden for production environment
# - name: VMName
#   value: WEALEVAPP001
# - name: VMResourceGroup
#   value: rg-xxxx-sls-a-euw-001

- name: deployEnv
  value: ${{ upper(variables['Build.SourceBranchName']) }}
# In case of CI triggered pipelines (IndividualCI, triggered by git push),
# use the system predefined variable Build.SourceBranchName to get the correct variable template
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: ./variables-test.yml
  - name: deployEnv # override value to map main branch to TEST deployment environment
    value: 'TEST'
- ${{ elseif eq(variables['Build.SourceBranchName'], 'qas') }}:
  - template: ./variables-qas.yml
- ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
  - template: ./variables-prod.yml
# - ${{ elseif startsWith(variables['Build.SourceBranchName'], 'dev_') }}:
#   - name: user
#     value: $[ replace( variables['Build.SourceBranchName'], 'dev_', '') ]
#   - template: ./variables-personal.yml
# - ${{ elseif contains(variables['Build.SourceBranch'], '/dev/') }}:
#   - name: user
#     value: $[ variables['Build.SourceBranchName'] ]
#   - template: ./variables-personal.yml
#   - name: deployEnv # override value to map main branch to DEV deployment environment
#     value: ${{ format('DEV_{0}', upper(variables['Build.SourceBranchName'])) }}
- ${{ elseif or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
  - name: user
    value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
  - template: ./variables-personal.yml
  - name: deployEnv # override value to map main branch to DEV deployment environment
    value: ${{ format('DEV_{0}', upper(variables.user)) }}

# # Required for PR triggered pipelines as predefined system variable Build.SourceBranchName
# # equals value: 'merge'. Also, the predefined system variable System.PullRequest.TargetBranch 
# # is not available in templates. So use separate build pipelines for each env and pass this as parameter value
# # https://learn.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml#system-variables-devops-services


# store the latest source commit ID, used for running specific tests
- ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
  - name: commitId
    value: $(System.PullRequest.SourceCommitId)
- ${{ else }}:
  - name: commitId
    value: $(Build.SourceVersion)


stages:
- stage: VARIABLES
  jobs:
  - job: Vars
    pool:
      name: 'VM'
      demands:
      - node.js
      - VisualStudio
      - Agent.ComputerName -equals $(VMName)
    steps:
    - script: |
        echo system.pullRequest.targetBranch: $(system.pullRequest.targetBranch)
        echo user: $(user)
        echo dataFactoryName: $(dataFactoryName)
        echo sqlDatabaseName: $(sqlDatabaseName)
        echo synapseSqlPool: $(synapseSqlPool)
        echo storageAccountName: $(storageAccountName)
        echo xuPrefix: $(xuPrefix)
        echo branchName: $(branchName)
        echo destination: $(destination)
        echo Build.Reason: ${{ variables['Build.Reason'] }}
        echo Build.SourceBranch: ${{ variables['Build.SourceBranch'] }}
        echo Build.SourceBranchName: ${{ variables['Build.SourceBranchName'] }}
        echo deployEnv: $(deployEnv)
        echo buildAndDeploy_synapse_dwh : $(buildAndDeploy_synapse_dwh)
        echo buildAndDeploy_azure_data_factory : $(buildAndDeploy_azure_data_factory)
        echo buildAndDeploy_orchestration : $(buildAndDeploy_orchestration)
        echo buildAndDeploy_xu_config : $(buildAndDeploy_xu_config)
        echo buildAndDeploy_synapse_workspace : $(buildAndDeploy_synapse_workspace)
      displayName: Print Variables
- stage: VALIDATE
  jobs:
  - template: ./jobs-validate.yml
- stage: BUILD
  jobs:
  - ${{ if variables.buildAndDeploy_synapse_dwh }}:
    - template: ./jobs-build-solution.yml
      parameters:
        folder: synapse-dwh
  
  - ${{ if variables.buildAndDeploy_azure_data_factory }}:
    - template: ./jobs-build-solution.yml
      parameters:
        folder: azure-data-factory
  
  - ${{ if variables.buildAndDeploy_orchestration }}:
    - template: ./jobs-build-solution.yml
      parameters:
        folder: orchestration
  
  - ${{ if variables.buildAndDeploy_xu_config }}:
    - template: ./jobs-build-solution.yml
      parameters:
        folder: xu-config
  
  - ${{ if variables.buildAndDeploy_synapse_workspace }}:
    - template: ./jobs-build-solution.yml
      parameters:
        folder: synapse-workspace


- ${{ if variables.runDeployment }}:
  - stage: DEPLOY_1
    jobs:    
    
    - ${{ if variables.buildAndDeploy_xu_config }}:
      - template: ./jobs-deploy-solution.yml
        parameters:
          folder: xu-config
          clean: $(clean)
    - ${{ if variables.buildAndDeploy_synapse_dwh }}:
      - template: ./jobs-deploy-solution.yml
        parameters:
          folder: synapse-dwh
          test: true
          clean: $(clean)
    - ${{ if variables.buildAndDeploy_orchestration }}:
      - template: ./jobs-deploy-solution.yml
        parameters:
          folder: orchestration
          clean: $(clean)
    - ${{ if variables.buildAndDeploy_synapse_workspace }}:
      - template: ./jobs-deploy-solution.yml
        parameters:
          folder: synapse-workspace
          clean: $(clean)

  - stage: DEPLOY_2
    jobs:
    
    - ${{ if variables.buildAndDeploy_azure_data_factory }}:
      - template: ./jobs-deploy-solution.yml
        parameters:
          folder: azure-data-factory
          clean: $(clean)
