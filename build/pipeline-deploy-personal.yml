# This pipeline is triggered only for manually triggered build pipelines to personal environments. 

trigger: none
resources:
  pipelines:
  - pipeline: build
    source: 'Build Personal'
    trigger: true
      # branches:
      #   include:
      #   - refs/heads/feature/*
      #   - refs/heads/users/*
        

# By default, each solution is deployed.

parameters:
- name: azure_data_factory
  displayName: Azure Data Factory
  type: boolean
  default: True
- name: orchestration
  displayName: Orchestration DB
  type: boolean
  default: True
- name: synapse_dwh
  displayName: Synapse DWH
  type: boolean
  default: True
- name: synapse_workspace
  displayName: Synapse Workspace
  type: boolean
  default: False
- name: xu_config
  displayName: Xtract Universal
  type: boolean
  default: True

variables:
# Get the personal variables template, user and deployment environment based on the source branch name. 
- ${{ if or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
  - template: ./variables-personal.yml
  - name: user
    value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
  - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
    value: ${{ format('30_DEV_{0}', upper(variables.user)) }}
  - name: commitId
    value: $(Build.SourceVersion)

stages:

# if triggered automatically
- ${{ if eq(variables['Build.Reason'], 'ResourceTrigger') }}:
  - stage: CHECK_SOLUTIONS_DEPLOYMENT
    jobs:
    - job: CheckSolutionsDeployment
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - download: build # download the published artifacts from the build pipeline
      - task: PowerShell@2
        displayName: 'Define which solutions to deploy'
        name: SetVariables
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/src/libs/set-solutionDeploymentVarsPersonal.ps1'
          arguments: >
            -workspace $(Pipeline.Workspace)
          pwsh: true
      
      - pwsh: |
          Write-Host 'deploy_azure_data_factory:'$(SetVariables.deploy_azure_data_factory);
          Write-Host 'deploy_orchestration:'$(SetVariables.deploy_orchestration);
          Write-Host 'deploy_synapse_dwh:'$(SetVariables.deploy_synapse_dwh);
          Write-Host 'deploy_synapse_workspace:'$(SetVariables.deploy_synapse_workspace);
          Write-Host 'deploy_xu_config:'$(SetVariables.deploy_xu_config);

  - stage: DEPLOY_1_AUTO
    dependsOn: 
    - CHECK_SOLUTIONS_DEPLOYMENT
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'orchestration'
        - name: 'synapse-dwh'
        - name: 'synapse-workspace'
        - name: 'xu-config'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
        conditional: true

  - stage: DEPLOY_2_AUTO
    dependsOn: 
    - CHECK_SOLUTIONS_DEPLOYMENT
    - DEPLOY_1_AUTO
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
        - name: 'azure-data-factory'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}
        conditional: true

  # - stage: DEPLOY_1_AUTO
  #   dependsOn: 
  #   - CHECK_SOLUTIONS_DEPLOYMENT
  #   jobs:
  #   - deployment: DEPLOY_ORCHESTRATION
  #     condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_orchestration'], 'true')
  #     timeoutInMinutes: 120
  #     pool:
  #       name: 'VM'
  #       demands:
  #       - node.js
  #       - VisualStudio
  #       - Python.Version
  #       - Agent.ComputerName -equals $(VMName)
  #     environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'ORCHESTRATION') }}
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - template: ../orchestration/build/steps-deploy.yml
  #   - deployment: DEPLOY_SYNAPSE_DWH
  #     condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_synapse_dwh'], 'true')
  #     timeoutInMinutes: 120
  #     pool:
  #       name: 'VM'
  #       demands:
  #       - node.js
  #       - VisualStudio
  #       - Python.Version
  #       - Agent.ComputerName -equals $(VMName)
  #     environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'SYNAPSE_DWH') }}
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - template: ../synapse-dwh/build/steps-deploy.yml
  #   - deployment: DEPLOY_SYNAPSE_WORKSPACE
  #     condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_synapse_workspace'], 'true')
  #     timeoutInMinutes: 120
  #     pool:
  #       name: 'VM'
  #       demands:
  #       - node.js
  #       - VisualStudio
  #       - Python.Version
  #       - Agent.ComputerName -equals $(VMName)
  #     environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'SYNAPSE_WORKSPACE') }}
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - template: ../synapse-workspace/build/steps-deploy.yml
  #   - deployment: DEPLOY_XU_CONFIG
  #     condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_xu_config'], 'true')
  #     timeoutInMinutes: 120
  #     pool:
  #       name: 'VM'
  #       demands:
  #       - node.js
  #       - VisualStudio
  #       - Python.Version
  #       - Agent.ComputerName -equals $(VMName)
  #     environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'XU_CONFIG') }}
  #     workspace:
  #       clean: all
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - template: ../xu-config/build/steps-deploy.yml
  
  # - stage: DEPLOY_2_AUTO
  #   dependsOn: 
  #   - CHECK_SOLUTIONS_DEPLOYMENT
  #   - DEPLOY_1_AUTO
  #   jobs:
  #   - deployment: DEPLOY_AZURE_DATA_FACTORY
  #     condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckChangedSolutions.outputs['SetVariables.deploy_azure_data_factory'], 'true')
  #     timeoutInMinutes: 120
  #     pool:
  #       name: 'VM'
  #       demands:
  #       - node.js
  #       - VisualStudio
  #       - Python.Version
  #       - Agent.ComputerName -equals $(VMName)
  #     environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'AZURE_DATA_FACTORY') }}
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - template: ../azure-data-factory/build/steps-deploy.yml
          
# Triggered Manually
- ${{ elseif eq(variables['Build.Reason'], 'Manual') }}:
  - stage: DEPLOY_1_MANUAL
    jobs:
    - template: ./jobs-deploy-multi.yml
      parameters:
        solutions:
          - ${{ if eq(parameters.orchestration, True) }}:
            - name: 'orchestration'
          - ${{ if eq(parameters.synapse_dwh, True) }}:
            - name: 'synapse-dwh'
          - ${{ if eq(parameters.synapse_workspace, True) }}:
            - name: 'synapse-workspace'
          - ${{ if eq(parameters.xu_config, True) }}:
            - name: 'xu-config'
        deployEnvPrefix: ${{ variables.deployEnvPrefix }}

  - ${{ if eq(parameters.azure_data_factory, True) }}:
    - stage: DEPLOY_2_MANUAL
      jobs:
      - template: ./jobs-deploy-multi.yml
        parameters:
          solutions:
          - name: 'azure-data-factory'
          deployEnvPrefix: ${{ variables.deployEnvPrefix }}