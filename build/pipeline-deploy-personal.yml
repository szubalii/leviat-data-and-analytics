# This pipeline is triggered only for manually triggered build pipelines to personal environments. 
resources:
  pipelines:
  - pipeline: build
    source: 'Build Personal'
    trigger:
      branches:
        include:
        - feature/*
        - users/*
        
trigger: none

# By default, each solution is build.

parameters:
- name: azure_data_factory
  displayName: Azure Data Factory
  type: boolean
  default: True
- name: orchestration
  displayName: Orchestration DB
  type: boolean
  default: True
- name: synapse_dwh
  displayName: Synapse DWH
  type: boolean
  default: True
- name: synapse_workspace
  displayName: Synapse Workspace
  type: boolean
  default: False
- name: xu_config
  displayName: Xtract Universal
  type: boolean
  default: True

variables:
# Get the personal variables template, user and deployment environment based on the source branch name. 
- ${{ if or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
  - template: ./variables-personal.yml
  - name: user
    value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
  - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
    value: ${{ format('30_DEV_{0}', upper(variables.user)) }}
  - name: commitId
    value: $(Build.SourceVersion)

stages:

# if triggered automatically
- ${{ if eq(variables['Build.Reason'], 'IndividualCI') }}:
  - stage: CHECK_BUILT_SOLUTIONS
    jobs:
    - job: CheckBuiltSolutions
      pool:
        vmImage: 'ubuntu-20.04'
      steps:
      - task: PowerShell@2
        displayName: 'Define which solutions to deploy'
        name: SetVariables
        inputs:
          filePath: '$(System.DefaultWorkingDirectory)/src/libs/set-solutionDeploymentVarsPersonal.ps1'
          
      
      - pwsh: |
          Write-Host 'deploy_azure_data_factory:'$(SetVariables.deploy_azure_data_factory);
          Write-Host 'deploy_orchestration:'$(SetVariables.deploy_orchestration);
          Write-Host 'deploy_synapse_dwh:'$(SetVariables.deploy_synapse_dwh);
          Write-Host 'deploy_synapse_workspace:'$(SetVariables.deploy_synapse_workspace);
          Write-Host 'deploy_xu_config:'$(SetVariables.deploy_xu_config);


  - stage: DEPLOY_1_AUTO
    dependsOn: 
    - CHECK_BUILT_SOLUTIONS
    jobs:
    - deployment: DEPLOY_ORCHESTRATION
      condition: eq(stageDependencies.CHECK_BUILT_SOLUTIONS.CheckBuiltSolutions.outputs['SetVariables.deploy_orchestration'], 'true')
      timeoutInMinutes: 120
      pool:
        name: 'VM'
        demands:
        - node.js
        - VisualStudio
        - Python.Version
        - Agent.ComputerName -equals $(VMName)
      environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'ORCHESTRATION') }}
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../orchestration/build/steps-deploy.yml
    - deployment: DEPLOY_SYNAPSE_DWH
      condition: eq(stageDependencies.CHECK_BUILT_SOLUTIONS.CheckBuiltSolutions.outputs['SetVariables.deploy_synapse_dwh'], 'true')
      timeoutInMinutes: 120
      pool:
        name: 'VM'
        demands:
        - node.js
        - VisualStudio
        - Python.Version
        - Agent.ComputerName -equals $(VMName)
      environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'SYNAPSE_DWH') }}
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../synapse-dwh/build/steps-deploy.yml
    - deployment: DEPLOY_SYNAPSE_WORKSPACE
      condition: eq(stageDependencies.CHECK_BUILT_SOLUTIONS.CheckBuiltSolutions.outputs['SetVariables.deploy_synapse_workspace'], 'true')
      timeoutInMinutes: 120
      pool:
        name: 'VM'
        demands:
        - node.js
        - VisualStudio
        - Python.Version
        - Agent.ComputerName -equals $(VMName)
      environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'SYNAPSE_WORKSPACE') }}
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../synapse-workspace/build/steps-deploy.yml
    - deployment: DEPLOY_XU_CONFIG
      condition: eq(stageDependencies.CHECK_BUILT_SOLUTIONS.CheckBuiltSolutions.outputs['SetVariables.deploy_xu_config'], 'true')
      timeoutInMinutes: 120
      pool:
        name: 'VM'
        demands:
        - node.js
        - VisualStudio
        - Python.Version
        - Agent.ComputerName -equals $(VMName)
      environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'XU_CONFIG') }}
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../xu-config/build/steps-deploy.yml
  
  - stage: DEPLOY_2_AUTO
    dependsOn: 
    - CHECK_BUILT_SOLUTIONS
    - DEPLOY_1_AUTO
    jobs:
    - deployment: DEPLOY_AZURE_DATA_FACTORY
      condition: eq(stageDependencies.CHECK_BUILT_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_azure_data_factory'], 'true')
      timeoutInMinutes: 120
      pool:
        name: 'VM'
        demands:
        - node.js
        - VisualStudio
        - Python.Version
        - Agent.ComputerName -equals $(VMName)
      environment: ${{ format('{0}_{1}', variables.deployEnvPrefix, 'AZURE_DATA_FACTORY') }}
      strategy:
        runOnce:
          deploy:
            steps:
            - template: ../azure-data-factory/build/steps-deploy.yml
          
# Triggered Manually
- ${{ else }}:
  - ${{ if or( eq(parameters.orchestration, True), eq(parameters.synapse_dwh, True), eq(parameters.synapse_workspace, True), eq(parameters.xu_config, True)) }}:
    - stage: DEPLOY_1_MANUAL
      jobs:
      - template: ./jobs-deploy-multi.yml
        parameters:
          solutions:
          - name: 'orchestration'
            deploy: ${{ parameters.orchestration }}
          - name: 'synapse-dwh'
            deploy: ${{ parameters.synapse_dwh }}
          - name: 'synapse-workspace'
            deploy: ${{ parameters.synapse_workspace }}
          - name: 'xu-config'
            deploy: ${{ parameters.xu_config }}
          deployEnvPrefix: ${{ variables.deployEnvPrefix }}

  - ${{ if eq(parameters.azure_data_factory, True) }}:
    - stage: DEPLOY_2_MANUAL
      jobs:
      - template: ./jobs-deploy-multi.yml
        parameters:
          solutions:
          - name: 'azure-data-factory'
            deploy: True
          deployEnvPrefix: ${{ variables.deployEnvPrefix }}