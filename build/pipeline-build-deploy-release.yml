# This pipeline is triggered whenever a PR is completed to any of the following branches:

# By default, each solution is build.

# The pipeline deploys a solution if for that solution files have changed in their respective 
# folders. 

trigger:
  branches:
    include:
    - main
    - qas
    - prod

variables:
# In case of CI triggered pipelines (IndividualCI, triggered by git push),
# use the system predefined variable Build.SourceBranchName to get the correct variable template
- ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
  - template: ./variables-test.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '20_TEST'
- ${{ elseif eq(variables['Build.SourceBranchName'], 'qas') }}:
  - template: ./variables-qas.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '10_QAS'
- ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
  - template: ./variables-prod.yml
  - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
    value: '00_PROD'
- ${{ elseif or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
  - template: ./variables-personal.yml
  - name: user
    value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
  - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
    value: ${{ format('30_DEV_{0}', upper(variables.user)) }}
# - name: deploy_azure_data_factory
#   value: true
# - name: deploy_orchestration
#   value: true
# - name: deploy_synapse_dwh
#   value: true
# - name: deploy_synapse_workspace
#   value: true
# - name: deploy_xu_config
#   value: true
- name: commitId
  value: $(Build.SourceVersion)

stages:
- stage: CHECK_CHANGED_SOLUTIONS
  #TODO only run this template when the source branch is not a release branch (main, qas, prod)
  # and was triggered by git push
  #TODO uncomment condition
  # condition: ${{ and(in(variables['Build.SourceBranchName'], 'main', 'qas', 'prod'), eq(variables['Build.Reason'], 'IndividualCI')) }}
  jobs:
  - job: CheckChangedSolutions
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - checkout: self
      fetchDepth: 0 # disables shallow fetch and results in correct return of git diff-tree
    
    - task: PowerShell@2
      displayName: 'Define which solutions deploy'
      name: SetVariables
      inputs:
        targetType: 'inline'
        pwsh: true
        script: |

          # Write-Host 'deploy_azure_data_factory:'$(deploy_azure_data_factory);
          # Write-Host 'deploy_orchestration:'$(deploy_orchestration);
          # Write-Host 'deploy_synapse_dwh:'$(deploy_synapse_dwh);
          # Write-Host 'deploy_synapse_workspace:'$(deploy_synapse_workspace);
          # Write-Host 'deploy_xu_config:'$(deploy_xu_config);

          # Retrieve list of changed files
          Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
          Write-Host "CommitID: $(commitId)"
          # Write-Host "Build.SourceVersion: $(Build.SourceVersion)"
          Write-Host "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
          $filePaths = git diff --name-only $(commitId)^! #difference between parent of commit and commit
          # $filePaths2 = $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
          Write-Host "Changed files using commitId:"
          $filePaths

          $solutions = @('azure-data-factory', 'orchestration', 'synapse-dwh', 'synapse-workspace', 'xu-config')

          ForEach ($solution in $solutions) {
            $solutionFolder = $solution+'/';
            $solutionVarName = 'deploy_'+$solution.replace('-', '_');
            Write-Host 'Check if there are any changed files for folder:'$solutionFolder;
            
            if (($filePaths -match $solutionFolder).count -eq 0){
              Write-Host 'No changed files found for'$solution'. Deployment of' $solution' will not take place.';
              Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]false";
            }
            else {
              Write-Host 'The following files were changed:';
              $filePaths -match $solutionFolder
              Write-Host 'Deployment of'$solution' will proceed.';
              Write-Host "##vso[task.setvariable variable=$solutionVarName;isOutput=true]true";
            }
          }
    - pwsh: |
        Write-Host 'deploy_azure_data_factory:'$(SetVariables.deploy_azure_data_factory);
        Write-Host 'deploy_orchestration:'$(SetVariables.deploy_orchestration);
        Write-Host 'deploy_synapse_dwh:'$(SetVariables.deploy_synapse_dwh);
        Write-Host 'deploy_synapse_workspace:'$(SetVariables.deploy_synapse_workspace);
        Write-Host 'deploy_xu_config:'$(SetVariables.deploy_xu_config);
    
    #     Write-Host 'deploy_azure_data_factory:'$(deploy_azure_data_factory);
    #     Write-Host 'deploy_orchestration:'$(deploy_orchestration);
    #     Write-Host 'deploy_synapse_dwh:'$(deploy_synapse_dwh);
    #     Write-Host 'deploy_synapse_workspace:'$(deploy_synapse_workspace);
    #     Write-Host 'deploy_xu_config:'$(deploy_xu_config);
        
- template: ./stages-build.yml
  parameters:
    build_azure_data_factory: true
    build_orchestration: true
    build_synapse_dwh: true
    build_synapse_workspace: true
    build_xu_config: true

# - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
#   - stage: DEPLOY_1
#     jobs:
#     - template: ./jobs-deploy-multi.yml
#       parameters:
#         solutions:
#         - name: 'orchestration'
#           deploy: True
#         - name: 'synapse-dwh'
#           deploy: True
#         - name: 'synapse-workspace'
#           deploy: True
#         - name: 'xu-config'
#           deploy: True
#         deployEnvPrefix: ${{ variables.deployEnvPrefix }}
# - ${{ else }}:
- stage: DEPLOY_1
  dependsOn: 
  - CHECK_CHANGED_SOLUTIONS
  # - BUILD
  jobs:
  - job: Test
    condition: eq(stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_orchestration'], 'true')
    steps:
    - bash: |
        echo 'test'
  - job: 
    steps:
    - bash: |
        echo $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_orchestration']]
  - template: ./jobs-deploy-multi.yml
    parameters:
      solutions:
      - name: 'orchestration'
        deploy: $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_orchestration']]
      - name: 'synapse-dwh'
        deploy: $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_synapse_dwh']]
      - name: 'synapse-workspace'
        deploy: $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_synapse_workspace']]
      - name: 'xu-config'
        deploy: $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_xu_config']]
      deployEnvPrefix: ${{ variables.deployEnvPrefix }}

# - ${{ if eq(variables['Build.Reason'], 'Manual') }}:
#   - stage: DEPLOY_2
#     jobs:
#     - template: ./jobs-deploy-multi.yml
#       parameters:
#         solutions:
#         - name: 'azure-data-factory'
#           deploy: True
#         deployEnvPrefix: ${{ variables.deployEnvPrefix }}
# - ${{ else }}:
- stage: DEPLOY_2
  dependsOn: 
  - CHECK_CHANGED_SOLUTIONS
  # - BUILD
  - DEPLOY_1
  jobs:
  - job: 
    steps:
    - bash: |
        echo $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_azure_data_factory']]
  - template: ./jobs-deploy-multi.yml
    parameters:
      solutions:
      - name: 'azure-data-factory'
        deploy: $[stageDependencies.CHECK_CHANGED_SOLUTIONS.CheckChangedSolutions.outputs['SetVariables.deploy_azure_data_factory']]
      deployEnvPrefix: ${{ variables.deployEnvPrefix }}




















# - stage: VARIABLES
#   dependsOn: SET_SOLUTION_DEPLOYMENT
#   jobs:
#   - job: Vars
#     variables:
#     - name: deploy_synapse_dwh_2
#       value: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_synapse_dwh']]
#     - name: deploy_azure_data_factory_2
#       value: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_azure_data_factory']]
#     pool:
#       name: 'VM'
#       demands:
#       - node.js
#       - VisualStudio
#       - Agent.ComputerName -equals $(VMName)
#     steps:
#     - script: |
#         echo variables.deploy_synapse_dwh: ${{ variables.deploy_synapse_dwh }}
#         echo variables.deploy_azure_data_factory: ${{ variables.deploy_azure_data_factory }}
#         echo variables.deploy_synapse_dwh_2: $(deploy_synapse_dwh_2)
#         echo variables.deploy_azure_data_factory_2: $(deploy_azure_data_factory_2)
#       displayName: Print Variables


# https://learn.microsoft.com/en-us/azure/devops/pipelines/process/conditions?view=azure-devops&tabs=yaml%2Cstages#use-the-output-variable-from-a-job-in-a-condition-in-a-subsequent-job


# - template: ./pipeline-build-deploy.yml
  # only run this template when the source branch is a release branch (main, qas, prod)
  # condition: ${{ in(variables['Build.SourceBranchName'], 'main', 'qas', 'prod') }}
  # parameters:
  #   build_azure_data_factory: true
  #   build_orchestration: true
  #   build_synapse_dwh: true
  #   build_synapse_workspace: true
  #   build_xu_config: true
    # dynamic_deployment: ${{ eq(variables.['Build.Reason'], 'IndividualCI') }}
    # dynamic_deployment: ${{ eq(variables['Build.Reason'], 'Manual') }}
    # deploy_azure_data_factory: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_synapse_dwh']]
    # deploy_orchestration: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_orchestration']]
    # deploy_synapse_dwh: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_synapse_dwh']]
    # deploy_synapse_workspace: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_synapse_workspace']]
    # deploy_xu_config: $[stageDependencies.SET_SOLUTION_DEPLOYMENT.Set_Solution_Deployment.outputs['solutionDeployment.deploy_xu_config']]
  

# extends:
#   template: ./pipeline-build-deploy.yml
#   # only run this template when the source branch is a release branch (main, qas, prod)
#   # condition: ${{ in(variables['Build.SourceBranchName'], 'main', 'qas', 'prod') }}
#   parameters:
#     build_azure_data_factory: true
#     build_orchestration: true
#     build_synapse_dwh: true
#     build_synapse_workspace: true
#     build_xu_config: true
#     deploy_azure_data_factory: true
#     deploy_orchestration: true
#     deploy_synapse_dwh: true
#     deploy_synapse_workspace: true
#     deploy_xu_config: true
    # deploy_azure_data_factory: ${{ variables.deploy_azure_data_factory }}
    # deploy_orchestration: ${{ variables.deploy_orchestration }}
    # deploy_synapse_dwh: ${{ variables.deploy_synapse_dwh }}
    # deploy_synapse_workspace: ${{ variables.deploy_synapse_workspace }}
    # deploy_xu_config: ${{ variables.deploy_xu_config }}


# variables:
# - name: build_azure_data_factory
#   value: true
# - name: build_orchestration
#   value: true
# - name: build_synapse_dwh
#   value: true
# - name: build_synapse_workspace
#   value: true
# - name: build_xu_config
#   value: true
# - name: deploy_azure_data_factory
#   value: true
# - name: deploy_orchestration
#   value: true
# - name: deploy_synapse_dwh
#   value: true
# - name: deploy_synapse_workspace
#   value: true
# - name: deploy_xu_config
#   value: true
# - name: commitId
#   value: $(Build.SourceVersion)
# - name: synDWHSolution
#   value: '**/synapse-dwh/*.sln'
# - name: orchDBSolution
#   value: '**/orchestration/*.sln'
# - name: buildPlatform
#   value: 'Any CPU'
# - name: buildConfiguration
#   value: 'Release'
# - name: ConnectionString
#   value: $(SynapseTesterConnectionString)

# # In case of CI triggered pipelines (IndividualCI, triggered by git push),
# # use the system predefined variable Build.SourceBranchName to get the correct variable template
# - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
#   - template: ./variables-test.yml
#   - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
#     value: '20_TEST'
# - ${{ elseif eq(variables['Build.SourceBranchName'], 'qas') }}:
#   - template: ./variables-qas.yml
#   - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
#     value: '10_QAS'
# - ${{ elseif eq(variables['Build.SourceBranchName'], 'prod') }}:
#   - template: ./variables-prod.yml
#   - name: deployEnvPrefix # override value to map main branch to TEST deployment environment
#     value: '00_PROD'
# - ${{ elseif or(contains(variables['Build.SourceBranch'], '/feature/'), contains(variables['Build.SourceBranch'], '/users/')) }}:
#   - name: user
#     value: ${{ split(variables['Build.SourceBranch'], '/')[3] }} #refs/heads/feature/mpors/...
#   - template: ./variables-personal.yml
#   - name: deployEnvPrefix # override value to map main branch to DEV deployment environment
#     value: ${{ format('30_DEV_{0}', upper(variables.user)) }}

# stages:
# - stage: SOLUTIONS
#   # only run this template when the source branch is not a release branch (main, qas, prod)
#   # and was triggered by git push
#   # condition: ${{ and(in(variables['Build.SourceBranchName'], 'main', 'qas', 'prod'), (eq(variables['Build.Reason'], 'IndividualCI')) }}
#   jobs:
#   - job: SOLUTIONS
#     pool:
#       vmImage: 'ubuntu-20.04'
#     steps:
#     - checkout: self
#       fetchDepth: 0 # disables shallow fetch and results in correct return of git diff-tree
    
#     - task: PowerShell@2
#       displayName: 'Define which solutions deploy'
#       inputs:
#         targetType: 'inline'
#         pwsh: true
#         script: |

#           # Retrieve list of changed files
#           Write-Host "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
#           Write-Host "CommitID: $(commitId)"
#           # Write-Host "Build.SourceVersion: $(Build.SourceVersion)"
#           Write-Host "Build.SourceVersionMessage: $(Build.SourceVersionMessage)"
#           $filePaths = $(git diff --name-only $(commitId)^!) #difference between parent of commit and commit
#           # $filePaths2 = $(git diff-tree --no-commit-id --name-only -r $(Build.SourceVersion))
#           Write-Host "Changed files using commitId: $($filePaths)"

#           $solutionFolders = @('azure-data-factory/', 'orchestration/', 'synapse-dwh/', 'synapse-workspace/', 'xu-config/')

#           ForEach ($solutionFolder in $solutionFolders) {
#             if (($filePaths -match $solutionFolder).count -eq 0){
#               $solutionVarName = 'deploy_' + $solutionFolder.TrimEnd('/')
#               Write-Host "##vso[task.setvariable variable=$solutionVarName]false"
#             }
#           }
  

# - template: ./stages-build-deploy-2.yml
#   parameters:
#     build_azure_data_factory: true
#     build_orchestration: true
#     build_synapse_dwh: true
#     build_synapse_workspace: true
#     build_xu_config: true
#     deploy_azure_data_factory: ${{ variables.deploy_azure_data_factory }}
#     deploy_orchestration: ${{ variables.deploy_orchestration }}
#     deploy_synapse_dwh: ${{ variables.deploy_synapse_dwh }}
#     deploy_synapse_workspace: ${{ variables.deploy_synapse_workspace }}
#     deploy_xu_config: ${{ variables.deploy_xu_config }}


