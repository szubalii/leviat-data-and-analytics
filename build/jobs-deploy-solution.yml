parameters:
- name: folder
  type: string
- name: solution
  type: string
- name: deployEnvPrefix
  type: string
- name: test
  type: boolean
  default: False
- name: conditional
  type: boolean
  default: false


# variables:
# - name: deployEnvSolution
#   value: $(envIndex)_$(deployEnv)_${{ upper(replace(parameters.folder, '-', '_')) }}

jobs: 
- job:
  variables:
    deploy_xu: "$[stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_xu_config']]"
    deploy_generic: "$[stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_${{ parameters.solution }}']]"
  steps:
  - bash: |
      echo param: ${{ solution.deploy }}
      echo var: $(deploy_xu)
      echo var: $(deploy_generic)
# - job: ${{ format('VAR_{0}', parameters.solution) }}
#   pool:
#     name: 'VM'
#     demands:
#     - node.js
#     - VisualStudio
#     - Agent.ComputerName -equals $(VMName)
#   steps:
#   - script: |
#       echo deployEnvPrefix: ${{ variables.deployEnvPrefix }}
#       echo parameters.deployEnvPrefix: ${{ parameters.deployEnvPrefix }}
    # displayName: Print Variables
- deployment: ${{ format('DEPLOY_{0}', parameters.solution) }}
  ${{ if parameters.conditional }}:
    condition: eq(stageDependencies.CHECK_SOLUTIONS_DEPLOYMENT.CheckSolutionsDeployment.outputs['SetVariables.deploy_${{ parameters.solution }}'], 'true')
  timeoutInMinutes: 120
  pool:
    name: 'VM'
    demands:
    - node.js
    - VisualStudio
    - Python.Version
    - Agent.ComputerName -equals $(VMName)
  environment: ${{ format('{0}_{1}', parameters.deployEnvPrefix, parameters.solution) }}
  workspace:
  # set clean to all when deploying xu-config
    ${{ if eq(parameters.folder, 'xu-config') }}: 
      clean: all
  strategy:
    runOnce:
      deploy:
        steps:
        - template: ../${{ parameters.folder }}/build/steps-deploy.yml